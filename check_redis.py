"""
Test script to verify Redis connection and rate limiter functionality.

This script checks:
1. Redis connection availability
2. Redis basic operations (SET, GET, INCR, EXPIRE)
3. Rate limiter backend functionality
"""

import asyncio
import sys
from loguru import logger

from config import get_settings
from src.utils.validators import (
    RedisRateLimiterBackend,
    InMemoryRateLimiterBackend,
)


async def test_redis_connection() -> bool:
    """
    Test Redis connection and basic operations.
    
    :return: True if Redis is available and working, False otherwise
    """
    try:
        import redis.asyncio as redis
        
        settings = get_settings()
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {settings.redis_url}")
        
        client = redis.from_url(
            settings.redis_url,
            encoding="utf-8",
            decode_responses=True,
            socket_connect_timeout=5,
            socket_timeout=5
        )
        
        # Test PING
        logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ PING...")
        await client.ping()
        logger.info("‚úÖ PONG –ø–æ–ª—É—á–µ–Ω")
        
        # Test SET/GET
        logger.info("üìù –¢–µ—Å—Ç SET/GET...")
        await client.set("test_key", "test_value", ex=10)
        value = await client.get("test_key")
        assert value == "test_value", f"Expected 'test_value', got '{value}'"
        logger.info("‚úÖ SET/GET —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # Test INCR
        logger.info("üî¢ –¢–µ—Å—Ç INCR...")
        await client.delete("test_counter")
        count1 = await client.incr("test_counter")
        count2 = await client.incr("test_counter")
        assert count1 == 1 and count2 == 2, f"Expected 1 and 2, got {count1} and {count2}"
        logger.info("‚úÖ INCR —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # Test EXPIRE/TTL
        logger.info("‚è±Ô∏è –¢–µ—Å—Ç EXPIRE/TTL...")
        await client.set("test_ttl", "value")
        await client.expire("test_ttl", 60)
        ttl = await client.ttl("test_ttl")
        assert 50 < ttl <= 60, f"Expected TTL ~60, got {ttl}"
        logger.info(f"‚úÖ EXPIRE/TTL —Ä–∞–±–æ—Ç–∞–µ—Ç (TTL: {ttl}s)")
        
        # Cleanup
        await client.delete("test_key", "test_counter", "test_ttl")
        await client.close()
        
        logger.info("‚úÖ Redis –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω")
        return True
        
    except ImportError:
        logger.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install redis")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ REDIS_URL –≤ .env —Ñ–∞–π–ª–µ")
        return False


async def test_rate_limiter_backend(backend_name: str, backend) -> None:
    """
    Test rate limiter backend functionality.
    
    :param backend_name: Name of the backend for logging
    :param backend: Rate limiter backend instance
    """
    logger.info(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {backend_name} backend...")
    
    user_id = 12345
    max_requests = 3
    time_window = 5
    
    # Test normal requests
    logger.info(f"üìä –¢–µ—Å—Ç –ª–∏–º–∏—Ç–∞: {max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {time_window}s")
    for i in range(max_requests):
        allowed, error = await backend.check_rate_limit(user_id, max_requests, time_window)
        assert allowed, f"Request {i+1} should be allowed"
        logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1}/{max_requests} —Ä–∞–∑—Ä–µ—à–µ–Ω")
    
    # Test rate limit exceeded
    logger.info("üö´ –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞...")
    allowed, error = await backend.check_rate_limit(user_id, max_requests, time_window)
    assert not allowed, "Request should be blocked"
    assert error is not None, "Error message should be present"
    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {error}")
    
    # Wait for window to expire
    logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {time_window}s –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞...")
    await asyncio.sleep(time_window + 1)
    
    # Test after window expired
    logger.info("üîÑ –¢–µ—Å—Ç –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–∫–Ω–∞...")
    allowed, error = await backend.check_rate_limit(user_id, max_requests, time_window)
    assert allowed, "Request should be allowed after window expired"
    logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞")
    
    logger.info(f"‚úÖ {backend_name} backend —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


async def main() -> None:
    """
    Main test function.
    
    Tests Redis connection and both rate limiter backends.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Redis –∏ Rate Limiter\n")
    
    # Test Redis connection
    redis_available = await test_redis_connection()
    
    # Test in-memory backend
    logger.info("\n" + "="*60)
    in_memory_backend = InMemoryRateLimiterBackend()
    await test_rate_limiter_backend("In-Memory", in_memory_backend)
    
    # Test Redis backend if available
    if redis_available:
        logger.info("\n" + "="*60)
        try:
            import redis.asyncio as redis
            settings = get_settings()
            redis_client = redis.from_url(
                settings.redis_url,
                encoding="utf-8",
                decode_responses=True
            )
            redis_backend = RedisRateLimiterBackend(redis_client)
            await test_rate_limiter_backend("Redis", redis_backend)
            
            # Cleanup
            await redis_client.delete("rate_limit:user:12345")
            await redis_client.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis backend: {e}")
    else:
        logger.warning("\n‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç Redis backend –ø—Ä–æ–ø—É—â–µ–Ω")
    
    logger.info("\n" + "="*60)
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    if not redis_available:
        logger.warning("\n‚ö†Ô∏è Redis –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å in-memory fallback.")
        logger.info("üí° –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Redis:")
        logger.info("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Redis: https://redis.io/download")
        logger.info("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis: redis-server")
        logger.info("   3. –£–∫–∞–∂–∏—Ç–µ REDIS_URL –≤ .env —Ñ–∞–π–ª–µ")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("\n‚õî –¢–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.critical(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

