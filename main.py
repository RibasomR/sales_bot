"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å Telegram-–±–æ—Ç–∞ –¥–ª—è —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.

–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç handlers –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling.
"""

import asyncio
import sys
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import BotCommand
from loguru import logger

from config import get_settings
from src.utils.logger import setup_logging
from src.handlers import common, voice, transactions, view, categories, export, settings
from src.models import init_db, create_tables, close_db
from src.models import User, Category, Transaction  # Import models to register them in metadata
from src.services.database import initialize_default_categories
from src.middlewares import (
    RateLimitMiddleware,
    ErrorHandlerMiddleware,
)
from src.utils.validators import (
    initialize_rate_limiter,
    InMemoryRateLimiterBackend,
    RedisRateLimiterBackend,
)
from src.services.openrouter_service import initialize_whisper


## –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:
    1. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    2. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    4. –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Redis –¥–ª—è rate limiting
    6. –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Bot –∏ Dispatcher
    7. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç middlewares
    8. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ handlers
    9. –ó–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    
    :return: None
    :raises Exception: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    """
    setup_logging()
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        config_settings = get_settings()
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        # Mask sensitive data in exception message
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {safe_error}")
        sys.exit(1)
    
    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {safe_error}")
        sys.exit(1)
    
    try:
        await create_tables()
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ë–î: {safe_error}")
        sys.exit(1)
    
    try:
        await initialize_default_categories()
        logger.info("‚úÖ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {safe_error}")
    
    ## Initialize Whisper model for voice message processing
    try:
        await initialize_whisper()
        logger.info("‚úÖ Whisper.cpp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Whisper.cpp: {safe_error}")
        logger.warning("–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏")
    
    ## Initialize rate limiter with Redis or fallback to in-memory
    redis_client = None
    try:
        import redis.asyncio as redis
        from src.utils.sanitizer import sanitize_url
        
        # Sanitize Redis URL for logging
        safe_redis_url = sanitize_url(config_settings.redis_url)
        
        redis_client = redis.from_url(
            config_settings.redis_url,
            encoding="utf-8",
            decode_responses=True,
            socket_connect_timeout=5,
            socket_timeout=5
        )
        # Test Redis connection
        await redis_client.ping()
        initialize_rate_limiter(RedisRateLimiterBackend(redis_client))
        logger.info(f"‚úÖ Rate limiting –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (Redis backend: {safe_redis_url})")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {safe_error}")
        logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ in-memory rate limiting (dev fallback)")
        initialize_rate_limiter(InMemoryRateLimiterBackend())
        logger.info("‚úÖ Rate limiting –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (in-memory backend)")
    
    bot = Bot(
        token=config_settings.bot_token,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    
    ## –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="add", description="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"),
        BotCommand(command="transactions", description="üìù –í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"),
        BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand(command="categories", description="üè∑Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"),
        BotCommand(command="export", description="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"),
        BotCommand(command="settings", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="help", description="‚ùì –°–ø—Ä–∞–≤–∫–∞"),
    ]
    await bot.set_my_commands(commands)
    logger.info("‚úÖ –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    dp = Dispatcher()
    
    ## –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middlewares
    dp.message.middleware(RateLimitMiddleware(max_requests=20, time_window=60))
    dp.callback_query.middleware(RateLimitMiddleware(max_requests=20, time_window=60))
    
    dp.message.middleware(ErrorHandlerMiddleware())
    dp.callback_query.middleware(ErrorHandlerMiddleware())
    logger.info("‚úÖ Error handler –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    dp.include_router(view.router)
    dp.include_router(settings.router)
    dp.include_router(categories.router)
    dp.include_router(export.router)
    dp.include_router(voice.router)
    dp.include_router(transactions.router)
    dp.include_router(common.router)
    logger.info("‚úÖ Handlers –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é polling...")
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {safe_error}")
        raise
    finally:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é graceful shutdown...")
        await bot.session.close()
        await close_db()
        if redis_client:
            await redis_client.close()
            logger.info("‚úÖ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
    except Exception as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.critical(f"üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {safe_error}")
        sys.exit(1)

