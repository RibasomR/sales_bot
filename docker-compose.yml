## Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram-–±–æ—Ç–∞ —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤
## –í–∫–ª—é—á–∞–µ—Ç: PostgreSQL, Redis, –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Whisper.cpp

version: '3.8'

services:
  ## PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    container_name: finance_bot_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finance_bot}
      POSTGRES_USER: ${POSTGRES_USER:-finance_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - finance_bot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance_user} -d ${POSTGRES_DB:-finance_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ rate limiting
  redis:
    image: redis:7-alpine
    container_name: finance_bot_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me_in_production}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - finance_bot_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  ## –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞ —Å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º Whisper.cpp
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finance_bot_app
    restart: unless-stopped
    env_file:
      - .env
    environment:
      # Bot Configuration
      BOT_TOKEN: ${BOT_TOKEN}
      AGENTROUTER_API_KEY: ${AGENTROUTER_API_KEY}
      
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-finance_user}:${POSTGRES_PASSWORD:-change_me_in_production}@postgres:5432/${POSTGRES_DB:-finance_bot}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-change_me_in_production}@redis:6379/0
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: ${LOG_FILE:-logs/bot.log}
      
      # Application Settings
      MAX_TRANSACTION_AMOUNT: ${MAX_TRANSACTION_AMOUNT:-10000000}
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-30}
      RATE_LIMIT_PERIOD: ${RATE_LIMIT_PERIOD:-60}
    volumes:
      - ./logs:/app/logs
      - whisper_cache:/root/.cache/whisper.cpp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - finance_bot_network
    command: >
      sh -c "
        echo '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...' &&
        sleep 10 &&
        echo 'üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...' &&
        alembic upgrade head &&
        echo 'üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...' &&
        python main.py
      "

## Volumes –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  whisper_cache:
    driver: local

## –°–µ—Ç—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
networks:
  finance_bot_network:
    driver: bridge


