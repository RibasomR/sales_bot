"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Excel (XLSX).

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–æ–≤ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
"""

import os
from datetime import datetime
from typing import Optional
from decimal import Decimal

from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill, Border, Side
from openpyxl.utils import get_column_letter
from loguru import logger

from src.models import Transaction, TransactionType
from src.services.database import (
    get_user_transactions_with_filters,
    get_user_statistics,
    get_or_create_user,
)


## –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel —Ñ–∞–π–ª–∞ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
async def generate_transactions_excel(
    user_id: int,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –°–æ–∑–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XLSX —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –í–∫–ª—é—á–∞–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ None - —Å –Ω–∞—á–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏)
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (–µ—Å–ª–∏ None - –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞)
    :return: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    :raises Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    
    Example:
        >>> file_path = await generate_transactions_excel(
        ...     user_id=1,
        ...     start_date=datetime(2024, 1, 1),
        ...     end_date=datetime(2024, 12, 31)
        ... )
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é Excel –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await get_user_transactions_with_filters(
        user_id=user_id,
        start_date=start_date,
        end_date=end_date,
        limit=10000,
        offset=0
    )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_user_statistics(user_id, start_date, end_date)
    
    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
    wb = Workbook()
    ws = wb.active
    ws.title = "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if start_date and end_date:
        period_text = f"—Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
    elif start_date:
        period_text = f"—Å {start_date.strftime('%d.%m.%Y')}"
    elif end_date:
        period_text = f"–ø–æ {end_date.strftime('%d.%m.%Y')}"
    else:
        period_text = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    
    # –°—Ç–∏–ª–∏
    header_font = Font(bold=True, size=12, color="FFFFFF")
    header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
    header_alignment = Alignment(horizontal="center", vertical="center")
    
    income_fill = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")
    expense_fill = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")
    
    border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    ws.merge_cells('A1:F1')
    title_cell = ws['A1']
    title_cell.value = f"–û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º {period_text}"
    title_cell.font = Font(bold=True, size=14)
    title_cell.alignment = Alignment(horizontal="center")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    ws.merge_cells('A2:B2')
    ws['A2'] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    ws['A2'].font = Font(bold=True, size=12)
    
    ws['A3'] = "–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:"
    ws['B3'] = float(stats['balance'])
    ws['B3'].number_format = '#,##0.00 ‚ÇΩ'
    
    ws['A4'] = "–î–æ—Ö–æ–¥—ã:"
    ws['B4'] = float(stats['total_income'])
    ws['B4'].number_format = '#,##0.00 ‚ÇΩ'
    ws['B4'].fill = income_fill
    
    ws['A5'] = "–†–∞—Å—Ö–æ–¥—ã:"
    ws['B5'] = float(stats['total_expense'])
    ws['B5'].number_format = '#,##0.00 ‚ÇΩ'
    ws['B5'].fill = expense_fill
    
    ws['A6'] = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π:"
    ws['B6'] = stats['income_count'] + stats['expense_count']
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    headers = ['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–¢–∏–ø', '–°—É–º–º–∞ (‚ÇΩ)', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–û–ø–∏—Å–∞–Ω–∏–µ']
    header_row = 8
    
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=header_row, column=col_num)
        cell.value = header
        cell.font = header_font
        cell.fill = header_fill
        cell.alignment = header_alignment
        cell.border = border
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    current_row = header_row + 1
    for transaction in transactions:
        # –î–∞—Ç–∞
        ws.cell(row=current_row, column=1, value=transaction.created_at.strftime('%d.%m.%Y'))
        
        # –í—Ä–µ–º—è
        ws.cell(row=current_row, column=2, value=transaction.created_at.strftime('%H:%M:%S'))
        
        # –¢–∏–ø
        type_cell = ws.cell(
            row=current_row,
            column=3,
            value="–î–æ—Ö–æ–¥" if transaction.type == TransactionType.INCOME else "–†–∞—Å—Ö–æ–¥"
        )
        
        # –°—É–º–º–∞
        amount_value = float(transaction.amount)
        if transaction.type == TransactionType.EXPENSE:
            amount_value = -amount_value
        
        amount_cell = ws.cell(row=current_row, column=4, value=amount_value)
        amount_cell.number_format = '#,##0.00'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫ —Å—Ç—Ä–æ–∫–µ
        fill = income_fill if transaction.type == TransactionType.INCOME else expense_fill
        for col in range(1, 7):
            ws.cell(row=current_row, column=col).fill = fill
            ws.cell(row=current_row, column=col).border = border
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        ws.cell(
            row=current_row,
            column=5,
            value=f"{transaction.category.emoji} {transaction.category.name}"
        )
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        ws.cell(
            row=current_row,
            column=6,
            value=transaction.description or ""
        )
        
        current_row += 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    ws.column_dimensions['A'].width = 12
    ws.column_dimensions['B'].width = 10
    ws.column_dimensions['C'].width = 10
    ws.column_dimensions['D'].width = 15
    ws.column_dimensions['E'].width = 25
    ws.column_dimensions['F'].width = 40
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    os.makedirs("logs", exist_ok=True)
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"logs/transactions_export_{user_id}_{timestamp}.xlsx"
    
    wb.save(filename)
    logger.success(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    
    return filename


## –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
def cleanup_export_file(file_path: str) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞.
    
    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    :return: None
    
    Example:
        >>> cleanup_export_file("logs/transactions_export_1_20240119.xlsx")
    """
    try:
        if os.path.exists(file_path):
            os.remove(file_path)
            logger.info(f"üóë –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

