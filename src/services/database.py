"""
–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
"""

from typing import Optional
from datetime import datetime, timedelta
from decimal import Decimal
from sqlalchemy import select, func, and_
from sqlalchemy.orm import selectinload
from loguru import logger

from src.models import (
    get_session,
    User,
    Category,
    CategoryType,
    Transaction,
    TransactionType,
)


## –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
DEFAULT_EXPENSE_CATEGORIES = [
    {"name": "–ü—Ä–æ–¥—É–∫—Ç—ã", "emoji": "üõí"},
    {"name": "–î–æ–º –∏ –ñ–ö–•", "emoji": "üè†"},
    {"name": "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "emoji": "üöó"},
    {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "emoji": "üè•"},
    {"name": "–û–¥–µ–∂–¥–∞", "emoji": "üëï"},
    {"name": "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "emoji": "üé¨"},
    {"name": "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ", "emoji": "üçΩ"},
    {"name": "–°–≤—è–∑—å –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "emoji": "üì±"},
    {"name": "–ê–ø—Ç–µ–∫–∞", "emoji": "üíä"},
    {"name": "–î—Ä—É–≥–æ–µ", "emoji": "‚úèÔ∏è"},
]

## –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
DEFAULT_INCOME_CATEGORIES = [
    {"name": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "emoji": "üíº"},
    {"name": "–§—Ä–∏–ª–∞–Ω—Å", "emoji": "üí∞"},
    {"name": "–ü–æ–¥–∞—Ä–æ–∫", "emoji": "üéÅ"},
    {"name": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "emoji": "üìà"},
    {"name": "–î—Ä—É–≥–æ–µ", "emoji": "‚úèÔ∏è"},
]


async def initialize_default_categories() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    
    –°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    
    :return: None
    
    Example:
        >>> await initialize_default_categories()
    """
    from src.models.base import async_session_maker
    
    if async_session_maker is None:
        raise Exception("Database not initialized. Call init_db() first.")
    
    async with async_session_maker() as session:
        try:
            existing_defaults = await session.execute(
                select(Category).where(Category.is_default == True)
            )
            
            if existing_defaults.scalars().first():
                logger.info("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                return
            
            logger.info("–°–æ–∑–¥–∞—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
            
            for cat_data in DEFAULT_EXPENSE_CATEGORIES:
                category = Category(
                    name=cat_data["name"],
                    emoji=cat_data["emoji"],
                    type=CategoryType.EXPENSE,
                    is_default=True,
                    user_id=None
                )
                session.add(category)
            
            for cat_data in DEFAULT_INCOME_CATEGORIES:
                category = Category(
                    name=cat_data["name"],
                    emoji=cat_data["emoji"],
                    type=CategoryType.INCOME,
                    is_default=True,
                    user_id=None
                )
                session.add(category)
            
            await session.commit()
            logger.success(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(DEFAULT_EXPENSE_CATEGORIES) + len(DEFAULT_INCOME_CATEGORIES)} –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        except Exception:
            await session.rollback()
            raise


async def get_or_create_user(
    telegram_id: int,
    username: Optional[str] = None,
    first_name: str = "",
    last_name: Optional[str] = None
) -> User:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ.
    
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω,
    —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î.
    
    :param telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    :param username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param first_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param last_name: –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Example:
        >>> user = await get_or_create_user(
        ...     telegram_id=123456789,
        ...     username="john_doe",
        ...     first_name="John"
        ... )
    """
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            if username and user.username != username:
                user.username = username
            if first_name and user.first_name != first_name:
                user.first_name = first_name
            if last_name and user.last_name != last_name:
                user.last_name = last_name
            await session.commit()
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: {telegram_id}")
        else:
            user = User(
                telegram_id=telegram_id,
                username=username,
                first_name=first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                last_name=last_name
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        
        return user


async def get_categories(
    user_id: Optional[int] = None,
    category_type: Optional[CategoryType] = None,
    include_default: bool = True
) -> list[Category]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Ç–∏–ø—É.
    –ú–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, —Ç–∞–∫ –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param category_type: –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param include_default: –í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    Example:
        >>> categories = await get_categories(
        ...     user_id=1,
        ...     category_type=CategoryType.EXPENSE,
        ...     include_default=True
        ... )
    """
    async with get_session() as session:
        query = select(Category)
        
        conditions = []
        
        if include_default:
            if user_id:
                from sqlalchemy import or_
                conditions.append(
                    or_(Category.is_default == True, Category.user_id == user_id)
                )
            else:
                conditions.append(Category.is_default == True)
        elif user_id:
            conditions.append(Category.user_id == user_id)
        
        if category_type:
            conditions.append(Category.type == category_type)
        
        if conditions:
            from sqlalchemy import and_
            query = query.where(and_(*conditions))
        
        result = await session.execute(query.order_by(Category.is_default.desc(), Category.name))
        return list(result.scalars().all())


## –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID
async def get_category_by_id(category_id: int) -> Optional[Category]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID.
    
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return: –û–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    Example:
        >>> category = await get_category_by_id(1)
        >>> print(category.name)
    """
    async with get_session() as session:
        result = await session.execute(
            select(Category).where(Category.id == category_id)
        )
        return result.scalar_one_or_none()


## –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def create_custom_category(
    user_id: int,
    name: str,
    category_type: CategoryType,
    emoji: str = "‚úèÔ∏è"
) -> Category:
    """
    –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param category_type: –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return: –°–æ–∑–¥–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    
    Example:
        >>> category = await create_custom_category(
        ...     user_id=1,
        ...     name="–ü–æ–¥–ø–∏—Å–∫–∏",
        ...     category_type=CategoryType.EXPENSE,
        ...     emoji="üì±"
        ... )
    """
    async with get_session() as session:
        category = Category(
            name=name,
            emoji=emoji,
            type=category_type,
            is_default=False,
            user_id=user_id
        )
        session.add(category)
        await session.commit()
        await session.refresh(category)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {name} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return category


## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def update_category(
    category_id: int,
    user_id: int,
    **kwargs
) -> Optional[Category]:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    :param kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (name, emoji)
    :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ None
    
    Example:
        >>> category = await update_category(
        ...     category_id=10,
        ...     user_id=1,
        ...     name="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
        ...     emoji="üéØ"
        ... )
    """
    async with get_session() as session:
        result = await session.execute(
            select(Category).where(
                Category.id == category_id,
                Category.user_id == user_id,
                Category.is_default == False
            )
        )
        category = result.scalar_one_or_none()
        
        if not category:
            logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return None
        
        for key, value in kwargs.items():
            if hasattr(category, key) and key in ['name', 'emoji']:
                setattr(category, key, value)
        
        await session.commit()
        await session.refresh(category)
        
        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return category


## –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def delete_category(category_id: int, user_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    :return: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    Example:
        >>> success = await delete_category(category_id=10, user_id=1)
    """
    async with get_session() as session:
        result = await session.execute(
            select(Category).where(
                Category.id == category_id,
                Category.user_id == user_id,
                Category.is_default == False
            )
        )
        category = result.scalar_one_or_none()
        
        if not category:
            logger.warning(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞")
            return False
        
        await session.delete(category)
        await session.commit()
        
        logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True


## –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def count_category_transactions(category_id: int, user_id: int) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Example:
        >>> count = await count_category_transactions(category_id=10, user_id=1)
    """
    async with get_session() as session:
        result = await session.execute(
            select(func.count(Transaction.id)).where(
                Transaction.category_id == category_id,
                Transaction.user_id == user_id
            )
        )
        return result.scalar() or 0


async def create_transaction(
    user_id: int,
    transaction_type: TransactionType,
    amount: float,
    category_id: int,
    description: Optional[str] = None
) -> Transaction:
    """
    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param transaction_type: –¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    :param amount: –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param category_id: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    
    Example:
        >>> transaction = await create_transaction(
        ...     user_id=1,
        ...     transaction_type=TransactionType.EXPENSE,
        ...     amount=500.0,
        ...     category_id=1,
        ...     description="–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        ... )
    """
    async with get_session() as session:
        transaction = Transaction(
            user_id=user_id,
            type=transaction_type,
            amount=amount,
            category_id=category_id,
            description=description
        )
        session.add(transaction)
        await session.commit()
        await session.refresh(transaction)
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction_type.value} {amount}‚ÇΩ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return transaction


async def get_user_transactions(
    user_id: int,
    transaction_type: Optional[TransactionType] = None,
    limit: int = 10,
    offset: int = 0
) -> list[Transaction]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø—É.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç eager loading –¥–ª—è —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param transaction_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    :param offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :return: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Example:
        >>> transactions = await get_user_transactions(
        ...     user_id=1,
        ...     transaction_type=TransactionType.EXPENSE,
        ...     limit=10
        ... )
    """
    async with get_session() as session:
        query = (
            select(Transaction)
            .options(selectinload(Transaction.category))
            .where(Transaction.user_id == user_id)
        )
        
        if transaction_type:
            query = query.where(Transaction.type == transaction_type)
        
        query = query.order_by(Transaction.created_at.desc()).limit(limit).offset(offset)
        
        result = await session.execute(query)
        return list(result.scalars().all())


async def delete_transaction(transaction_id: int, user_id: int) -> bool:
    """
    –£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –ø—Ä–æ–≤–µ—Ä—è—è, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    :param transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    :return: True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    
    Example:
        >>> success = await delete_transaction(transaction_id=123, user_id=1)
    """
    async with get_session() as session:
        result = await session.execute(
            select(Transaction).where(
                Transaction.id == transaction_id,
                Transaction.user_id == user_id
            )
        )
        transaction = result.scalar_one_or_none()
        
        if not transaction:
            return False
        
        await session.delete(transaction)
        await session.commit()
        
        logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return True


## –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
async def get_transaction_by_id(transaction_id: int, user_id: int) -> Optional[Transaction]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ ID —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.
    
    :param transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    :return: –û–±—ä–µ–∫—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–ª–∏ None
    
    Example:
        >>> transaction = await get_transaction_by_id(transaction_id=123, user_id=1)
    """
    async with get_session() as session:
        result = await session.execute(
            select(Transaction)
            .options(
                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                selectinload(Transaction.category)
            )
            .where(
                Transaction.id == transaction_id,
                Transaction.user_id == user_id
            )
        )
        return result.scalar_one_or_none()


## –ü–æ–¥—Å—á–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def count_user_transactions(
    user_id: int,
    transaction_type: Optional[TransactionType] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None
) -> int:
    """
    –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param transaction_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Example:
        >>> count = await count_user_transactions(user_id=1, transaction_type=TransactionType.EXPENSE)
    """
    async with get_session() as session:
        query = select(func.count(Transaction.id)).where(Transaction.user_id == user_id)
        
        if transaction_type:
            query = query.where(Transaction.type == transaction_type)
        
        if start_date:
            query = query.where(Transaction.created_at >= start_date)
        
        if end_date:
            query = query.where(Transaction.created_at <= end_date)
        
        result = await session.execute(query)
        return result.scalar() or 0


## –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥—É
async def get_user_transactions_with_filters(
    user_id: int,
    transaction_type: Optional[TransactionType] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    limit: int = 10,
    offset: int = 0
) -> list[Transaction]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –ø–µ—Ä–∏–æ–¥—É.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param transaction_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    :param offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    :return: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    
    Example:
        >>> from datetime import datetime, timedelta
        >>> end = datetime.now()
        >>> start = end - timedelta(days=7)
        >>> transactions = await get_user_transactions_with_filters(
        ...     user_id=1,
        ...     start_date=start,
        ...     end_date=end
        ... )
    """
    async with get_session() as session:
        query = (
            select(Transaction)
            .options(selectinload(Transaction.category))
            .where(Transaction.user_id == user_id)
        )
        
        if transaction_type:
            query = query.where(Transaction.type == transaction_type)
        
        if start_date:
            query = query.where(Transaction.created_at >= start_date)
        
        if end_date:
            query = query.where(Transaction.created_at <= end_date)
        
        query = query.order_by(Transaction.created_at.desc()).limit(limit).offset(offset)
        
        result = await session.execute(query)
        return list(result.scalars().all())


## –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_statistics(
    user_id: int,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None
) -> dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :return: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    
    Example:
        >>> stats = await get_user_statistics(user_id=1)
        >>> print(stats['total_income'])
    """
    async with get_session() as session:
        # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        query = select(
            Transaction.type,
            func.sum(Transaction.amount).label('total'),
            func.count(Transaction.id).label('count')
        ).where(Transaction.user_id == user_id)
        
        if start_date:
            query = query.where(Transaction.created_at >= start_date)
        
        if end_date:
            query = query.where(Transaction.created_at <= end_date)
        
        query = query.group_by(Transaction.type)
        
        result = await session.execute(query)
        rows = result.all()
        
        stats = {
            'total_income': Decimal('0'),
            'total_expense': Decimal('0'),
            'income_count': 0,
            'expense_count': 0,
            'balance': Decimal('0'),
        }
        
        for row in rows:
            if row.type == TransactionType.INCOME:
                stats['total_income'] = row.total or Decimal('0')
                stats['income_count'] = row.count
            elif row.type == TransactionType.EXPENSE:
                stats['total_expense'] = row.total or Decimal('0')
                stats['expense_count'] = row.count
        
        stats['balance'] = stats['total_income'] - stats['total_expense']
        
        return stats


## –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
async def get_top_expense_categories(
    user_id: int,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    limit: int = 3
) -> list[dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    
    Example:
        >>> top_categories = await get_top_expense_categories(user_id=1, limit=3)
        >>> for cat in top_categories:
        ...     print(f"{cat['name']}: {cat['total']} —Ä—É–±.")
    """
    async with get_session() as session:
        query = (
            select(
                Category.name,
                Category.emoji,
                func.sum(Transaction.amount).label('total'),
                func.count(Transaction.id).label('count')
            )
            .join(Category, Transaction.category_id == Category.id)
            .where(
                and_(
                    Transaction.user_id == user_id,
                    Transaction.type == TransactionType.EXPENSE
                )
            )
        )
        
        if start_date:
            query = query.where(Transaction.created_at >= start_date)
        
        if end_date:
            query = query.where(Transaction.created_at <= end_date)
        
        query = (
            query.group_by(Category.id, Category.name, Category.emoji)
            .order_by(func.sum(Transaction.amount).desc())
            .limit(limit)
        )
        
        result = await session.execute(query)
        rows = result.all()
        
        return [
            {
                'name': row.name,
                'emoji': row.emoji,
                'total': row.total,
                'count': row.count
            }
            for row in rows
        ]


## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def update_transaction(
    transaction_id: int,
    user_id: int,
    **kwargs
) -> Optional[Transaction]:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param transaction_id: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤)
    :param kwargs: –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (amount, category_id, description)
    :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–ª–∏ None
    
    Example:
        >>> transaction = await update_transaction(
        ...     transaction_id=123,
        ...     user_id=1,
        ...     amount=1000.0,
        ...     description="–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        ... )
    """
    async with get_session() as session:
        result = await session.execute(
            select(Transaction).where(
                Transaction.id == transaction_id,
                Transaction.user_id == user_id
            )
        )
        transaction = result.scalar_one_or_none()
        
        if not transaction:
            return None
        
        for key, value in kwargs.items():
            if hasattr(transaction, key):
                setattr(transaction, key, value)
        
        await session.commit()
        await session.refresh(transaction)
        
        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return transaction

