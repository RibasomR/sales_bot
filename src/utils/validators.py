"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∏–Ω—ä–µ–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.
"""

import re
import html
import time
from typing import Optional, Protocol
from decimal import Decimal, InvalidOperation
from abc import ABC, abstractmethod

## –ó–∞—â–∏—Ç–∞ –æ—Ç XSS: –æ—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤
def sanitize_text(text: str, max_length: Optional[int] = None) -> str:
    """
    –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ HTML.
    
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Ç–µ–≥–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫.
    
    :param text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    :param max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    :return: –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    
    Example:
        >>> sanitize_text("<script>alert('XSS')</script>")
        "&lt;script&gt;alert('XSS')&lt;/script&gt;"
    """
    if not text:
        return ""
    
    text = text.strip()
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
    text = html.escape(text)
    
    # –£–¥–∞–ª—è–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (–∫—Ä–æ–º–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏)
    text = re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x9f]', '', text)
    
    if max_length and len(text) > max_length:
        text = text[:max_length]
    
    return text


## –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def validate_amount(amount_str: str) -> tuple[bool, Optional[Decimal], Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—É–º–º–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö.
    
    :param amount_str: –°—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–æ–π
    :return: –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–∞, —Å—É–º–º–∞ –∫–∞–∫ Decimal, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    
    Example:
        >>> validate_amount("500")
        (True, Decimal('500'), None)
        >>> validate_amount("-100")
        (False, None, "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    """
    try:
        # –û—á–∏—â–∞–µ–º –æ—Ç –≤–∞–ª—é—Ç—ã –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        cleaned = amount_str.replace(",", ".").replace("‚ÇΩ", "").replace(" ", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞
        if not re.match(r'^\d+(\.\d{1,2})?$', cleaned):
            return False, None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É."
        
        amount = Decimal(cleaned)
        
        if amount <= 0:
            return False, None, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π."
        
        if amount > 10_000_000:
            return False, None, "‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 10 000 000)."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
        if amount.as_tuple().exponent < -2:
            return False, None, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–º–∞–∫—Å–∏–º—É–º 2)."
        
        return True, amount, None
        
    except (ValueError, InvalidOperation):
        return False, None, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."


## –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def validate_category_name(name: str) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–ª–∏–Ω—É –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :return: –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    
    Example:
        >>> validate_category_name("–ü—Ä–æ–¥—É–∫—Ç—ã")
        (True, None)
        >>> validate_category_name("A")
        (False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞).")
    """
    name = name.strip()
    
    if len(name) < 2:
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)."
    
    if len(name) > 50:
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if re.search(r'[<>\"\'`]', name):
        return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã."
    
    return True, None


## –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def validate_description(description: str) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param description: –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :return: –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    
    Example:
        >>> validate_description("–ü–æ–∫—É–ø–∫–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
        (True, None)
    """
    if len(description) > 500:
        return False, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)."
    
    return True, None


## –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–º–æ–¥–∑–∏
def validate_emoji(emoji: str) -> tuple[bool, Optional[str]]:
    """
    –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏.
    
    :param emoji: –°—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏
    :return: –ö–æ—Ä—Ç–µ–∂ (–≤–∞–ª–∏–¥–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ)
    
    Example:
        >>> validate_emoji("üõí")
        (True, None)
        >>> validate_emoji("ABC")
        (False, "‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏.")
    """
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ (Unicode ranges)
    emoji_pattern = re.compile(
        "["
        "\U0001F600-\U0001F64F"  # emoticons
        "\U0001F300-\U0001F5FF"  # symbols & pictographs
        "\U0001F680-\U0001F6FF"  # transport & map symbols
        "\U0001F1E0-\U0001F1FF"  # flags (iOS)
        "\U00002702-\U000027B0"
        "\U000024C2-\U0001F251"
        "]+",
        flags=re.UNICODE
    )
    
    if not emoji_pattern.match(emoji):
        return False, "‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ–¥–∑–∏."
    
    if len(emoji) > 10:
        return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏ (–º–∞–∫—Å–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
    
    return True, None


## Rate limiter backend interface
class RateLimiterBackend(ABC):
    """
    Abstract base class for rate limiter storage backends.
    
    Defines the interface for different storage implementations
    (in-memory, Redis, etc.).
    """
    
    @abstractmethod
    async def check_rate_limit(
        self,
        user_id: int,
        max_requests: int,
        time_window: int
    ) -> tuple[bool, Optional[str]]:
        """
        Check rate limit for a user.
        
        :param user_id: User ID
        :param max_requests: Maximum number of requests allowed
        :param time_window: Time window in seconds
        :return: Tuple (allowed, error_message)
        """
        pass


## In-memory rate limiter backend (fallback for development)
class InMemoryRateLimiterBackend(RateLimiterBackend):
    """
    In-memory rate limiter backend.
    
    Stores request timestamps in memory. Not suitable for production
    with multiple processes, but works as a development fallback.
    """
    
    def __init__(self):
        """Initialize in-memory storage."""
        self._requests: dict[int, list[float]] = {}
    
    async def check_rate_limit(
        self,
        user_id: int,
        max_requests: int,
        time_window: int
    ) -> tuple[bool, Optional[str]]:
        """
        Check rate limit using in-memory storage.
        
        :param user_id: User ID
        :param max_requests: Maximum number of requests allowed
        :param time_window: Time window in seconds
        :return: Tuple (allowed, error_message)
        """
        current_time = time.time()
        
        if user_id not in self._requests:
            self._requests[user_id] = []
        
        # Remove old requests outside time window
        self._requests[user_id] = [
            req_time for req_time in self._requests[user_id]
            if current_time - req_time < time_window
        ]
        
        # Check if limit exceeded
        if len(self._requests[user_id]) >= max_requests:
            return False, f"‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_window} —Å–µ–∫—É–Ω–¥."
        
        # Add current request
        self._requests[user_id].append(current_time)
        
        return True, None


## Redis rate limiter backend (production-ready)
class RedisRateLimiterBackend(RateLimiterBackend):
    """
    Redis-based rate limiter backend.
    
    Uses Redis INCR and EXPIRE commands for distributed rate limiting.
    Suitable for production with multiple processes/instances.
    """
    
    def __init__(self, redis_client):
        """
        Initialize Redis backend.
        
        :param redis_client: Redis client instance (aioredis or redis.asyncio)
        """
        self._redis = redis_client
    
    async def check_rate_limit(
        self,
        user_id: int,
        max_requests: int,
        time_window: int
    ) -> tuple[bool, Optional[str]]:
        """
        Check rate limit using Redis storage.
        
        Uses Redis INCR to atomically increment counter and EXPIRE
        to set TTL on the key. This ensures accurate rate limiting
        across multiple processes/instances.
        
        :param user_id: User ID
        :param max_requests: Maximum number of requests allowed
        :param time_window: Time window in seconds
        :return: Tuple (allowed, error_message)
        """
        key = f"rate_limit:user:{user_id}"
        
        try:
            # Increment counter atomically
            current_count = await self._redis.incr(key)
            
            # Set expiration on first request in window
            if current_count == 1:
                await self._redis.expire(key, time_window)
            
            # Check if limit exceeded
            if current_count > max_requests:
                # Get TTL to show user when they can retry
                ttl = await self._redis.ttl(key)
                if ttl > 0:
                    return False, f"‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {ttl} —Å–µ–∫—É–Ω–¥."
                return False, f"‚è± –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {time_window} —Å–µ–∫—É–Ω–¥."
            
            return True, None
            
        except Exception as e:
            # On Redis error, allow request but log the issue
            # This prevents Redis failures from blocking the bot
            from loguru import logger
            logger.error(f"Redis rate limit error: {e}")
            return True, None


## Rate limiter with pluggable backend
class RateLimiter:
    """
    Rate limiter with pluggable storage backend.
    
    Supports both in-memory (development) and Redis (production) backends.
    Automatically falls back to in-memory if Redis is unavailable.
    """
    
    def __init__(self, backend: RateLimiterBackend):
        """
        Initialize rate limiter with specific backend.
        
        :param backend: Storage backend implementation
        """
        self._backend = backend
    
    async def check_rate_limit(
        self,
        user_id: int,
        max_requests: int = 10,
        time_window: int = 60
    ) -> tuple[bool, Optional[str]]:
        """
        Check rate limit for a user.
        
        :param user_id: User ID
        :param max_requests: Maximum number of requests allowed
        :param time_window: Time window in seconds
        :return: Tuple (allowed, error_message)
        
        Example:
            >>> limiter = RateLimiter(InMemoryRateLimiterBackend())
            >>> allowed, error = await limiter.check_rate_limit(user_id=123)
        """
        return await self._backend.check_rate_limit(user_id, max_requests, time_window)


## Global rate limiter instance (will be initialized in main.py)
rate_limiter: Optional[RateLimiter] = None


def initialize_rate_limiter(backend: RateLimiterBackend) -> None:
    """
    Initialize global rate limiter instance with specific backend.
    
    :param backend: Storage backend to use
    """
    global rate_limiter
    rate_limiter = RateLimiter(backend)

