"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è:
- –ö–æ–º–∞–Ω–¥—ã /add —Å –ø–æ—à–∞–≥–æ–≤—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º –≤–≤–æ–¥–æ–º
- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""

import re
from decimal import Decimal, InvalidOperation
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.states import AddTransactionStates
from src.keyboards.transaction_keyboards import (
    get_transaction_type_keyboard,
    get_categories_keyboard,
    get_confirmation_keyboard,
    get_cancel_keyboard,
)
from src.services.database import (
    get_or_create_user,
    get_categories,
    get_category_by_id,
    create_custom_category,
    create_transaction,
)
from src.models import CategoryType, TransactionType
from src.utils.validators import (
    validate_amount,
    validate_category_name,
    validate_description,
    sanitize_text,
)


router = Router(name="transactions")


## –ö–æ–º–∞–Ω–¥–∞ /add - –Ω–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.message(Command("add"))
async def cmd_add_transaction(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ä–µ–∂–∏–º–∞:
    1. –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥: /add ‚Üí –≤—ã–±–æ—Ä —Ç–∏–ø–∞ ‚Üí —Å—É–º–º–∞ ‚Üí –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –æ–ø–∏—Å–∞–Ω–∏–µ
    2. –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥: /add —Ä–∞—Å—Ö–æ–¥ 500 –ø—Ä–æ–¥—É–∫—Ç—ã
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split(maxsplit=1)
    
    if len(command_args) > 1:
        # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await handle_quick_add(message, state, user.id, command_args[1])
    else:
        # –ü–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
        await state.set_state(AddTransactionStates.choosing_type)
        await state.update_data(user_id=user.id)
        
        await message.answer(
            "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=get_transaction_type_keyboard()
        )


## –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
async def handle_quick_add(message: Message, state: FSMContext, user_id: int, args_text: str) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: "—Ç–∏–ø —Å—É–º–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è [–æ–ø–∏—Å–∞–Ω–∏–µ]"
    –ü—Ä–∏–º–µ—Ä—ã: "—Ä–∞—Å—Ö–æ–¥ 500 –ø—Ä–æ–¥—É–∫—Ç—ã", "–¥–æ—Ö–æ–¥ 15000 –∑–∞—Ä–ø–ª–∞—Ç–∞"
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    :param args_text: –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add
    :return: None
    """
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parts = args_text.split()
    
    if len(parts) < 2:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>/add —Ç–∏–ø —Å—É–º–º–∞ [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ]</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/add —Ä–∞—Å—Ö–æ–¥ 500 –ø—Ä–æ–¥—É–∫—Ç—ã</code>"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    type_str = parts[0].lower()
    if type_str in ["—Ä–∞—Å—Ö–æ–¥", "—Ä–∞—Å—Ö–æ–¥—ã", "—Ç—Ä–∞—Ç–∞", "—Ç—Ä–∞—Ç—ã", "expense"]:
        transaction_type = TransactionType.EXPENSE
        category_type = CategoryType.EXPENSE
    elif type_str in ["–¥–æ—Ö–æ–¥", "–¥–æ—Ö–æ–¥—ã", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "income"]:
        transaction_type = TransactionType.INCOME
        category_type = CategoryType.INCOME
    else:
        await message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–¥–æ—Ö–æ–¥</b> –∏–ª–∏ <b>—Ä–∞—Å—Ö–æ–¥</b>"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
    amount_str = parts[1].replace(",", ".").replace("‚ÇΩ", "").replace(" ", "")
    try:
        amount = float(amount_str)
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, InvalidOperation):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 500, 1500.50, 15000"
        )
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = None
    description_parts = []
    
    if len(parts) > 2:
        category_name = parts[2].lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        categories = await get_categories(
            user_id=user_id,
            category_type=category_type,
            include_default=True
        )
        
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        for cat in categories:
            if category_name in cat.name.lower():
                category = cat
                break
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–î—Ä—É–≥–æ–µ"
        if not category:
            for cat in categories:
                if cat.name == "–î—Ä—É–≥–æ–µ":
                    category = cat
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
                    description_parts.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parts[2]}")
                    break
        
        # –û–ø–∏—Å–∞–Ω–∏–µ - –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if len(parts) > 3:
            description_parts.extend(parts[3:])
    else:
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "–î—Ä—É–≥–æ–µ"
        categories = await get_categories(
            user_id=user_id,
            category_type=category_type,
            include_default=True
        )
        for cat in categories:
            if cat.name == "–î—Ä—É–≥–æ–µ":
                category = cat
                break
    
    if not category:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥: /add"
        )
        return
    
    description = " ".join(description_parts) if description_parts else None
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    try:
        transaction = await create_transaction(
            user_id=user_id,
            transaction_type=transaction_type,
            amount=amount,
            category_id=category.id,
            description=description
        )
        
        type_emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        type_text = "–î–æ—Ö–æ–¥" if transaction_type == TransactionType.INCOME else "–†–∞—Å—Ö–æ–¥"
        sign = "+" if transaction_type == TransactionType.INCOME else "-"
        
        response = (
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞</b>\n\n"
            f"{type_emoji} <b>{type_text}</b>\n"
            f"üíµ –°—É–º–º–∞: <b>{sign}{amount:.2f} ‚ÇΩ</b>\n"
            f"{category.emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category.name}</b>"
        )
        
        if description:
            response += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


## –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(StateFilter(AddTransactionStates.choosing_type), F.data.startswith("type:"))
async def process_type_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    transaction_type = callback.data.split(":")[1]
    
    await state.update_data(
        transaction_type=transaction_type,
        category_type=CategoryType.EXPENSE if transaction_type == "expense" else CategoryType.INCOME
    )
    
    await state.set_state(AddTransactionStates.entering_amount)
    
    type_emoji = "üí∏" if transaction_type == "expense" else "üí∞"
    type_text = "–†–∞—Å—Ö–æ–¥" if transaction_type == "expense" else "–î–æ—Ö–æ–¥"
    
    await callback.message.edit_text(
        f"{type_emoji} <b>{type_text}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        f"<i>–ü—Ä–∏–º–µ—Ä—ã: 500, 1500.50, 15000</i>",
        reply_markup=get_cancel_keyboard()
    )
    
    await callback.answer()


## –í–≤–æ–¥ —Å—É–º–º—ã
@router.message(StateFilter(AddTransactionStates.entering_amount))
async def process_amount_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏—Ö –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    from sqlalchemy import select
    from src.models import User, get_session
    from datetime import datetime
    from config import get_settings
    
    ## –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º validators
    is_valid, amount, error_msg = validate_amount(message.text)
    
    if not is_valid:
        await message.answer(
            f"{error_msg}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    ## –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    data = await state.get_data()
    transaction_type = data.get("transaction_type")
    
    if transaction_type == "expense":
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                settings = get_settings()
                
                transaction_limit = user.max_transaction_limit or settings.max_transaction_amount
                
                if amount > transaction_limit:
                    warning_text = (
                        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
                        f"–°—É–º–º–∞ {amount:,.0f}‚ÇΩ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ({transaction_limit:,}‚ÇΩ).\n\n"
                        f"–¢—ã —É–≤–µ—Ä–µ–Ω? –ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É."
                    )
                    await message.answer(warning_text, parse_mode="HTML")
                
                if user.monthly_limit:
                    now = datetime.now()
                    start_month = datetime(now.year, now.month, 1)
                    from src.services.database import get_user_statistics
                    stats = await get_user_statistics(user.id, start_date=start_month)
                    
                    current_spent = float(stats['total_expense'])
                    new_total = current_spent + amount
                    
                    if new_total > user.monthly_limit:
                        remaining = user.monthly_limit - current_spent
                        over_limit = new_total - user.monthly_limit
                        
                        warning_text = (
                            f"üö® <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞!</b>\n\n"
                            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {current_spent:,.0f}‚ÇΩ\n"
                            f"–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç: {user.monthly_limit:,}‚ÇΩ\n"
                            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f}‚ÇΩ\n\n"
                            f"–≠—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç –Ω–∞ {over_limit:,.0f}‚ÇΩ"
                        )
                        await message.answer(warning_text, parse_mode="HTML")
                    elif (new_total / user.monthly_limit) >= 0.8:
                        percent = (new_total / user.monthly_limit) * 100
                        remaining = user.monthly_limit - new_total
                        
                        warning_text = (
                            f"‚ö†Ô∏è <b>–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É</b>\n\n"
                            f"–ü–æ—Å–ª–µ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç—ã –ø–æ—Ç—Ä–∞—Ç–∏—à—å {percent:.0f}% –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞.\n"
                            f"–û—Å—Ç–∞–Ω–µ—Ç—Å—è: {remaining:,.0f}‚ÇΩ"
                        )
                        await message.answer(warning_text, parse_mode="HTML")
    
    await state.update_data(amount=amount)
    await state.set_state(AddTransactionStates.choosing_category)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    data = await state.get_data()
    user_id = data["user_id"]
    category_type = data["category_type"]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = await get_categories(
        user_id=user_id,
        category_type=category_type,
        include_default=True
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (id, name, emoji)
    categories_list = [(cat.id, cat.name, cat.emoji) for cat in categories]
    
    type_emoji = "üí∏" if category_type == CategoryType.EXPENSE else "üí∞"
    type_text = "—Ä–∞—Å—Ö–æ–¥–∞" if category_type == CategoryType.EXPENSE else "–¥–æ—Ö–æ–¥–∞"
    
    await message.answer(
        f"{type_emoji} <b>–°—É–º–º–∞: {amount:.2f} ‚ÇΩ</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {type_text}:",
        reply_markup=get_categories_keyboard(categories_list, data["transaction_type"])
    )


## –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(StateFilter(AddTransactionStates.choosing_category), F.data.startswith("category:"))
async def process_category_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    category_data = callback.data.split(":")[1]
    
    if category_data == "custom":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await state.set_state(AddTransactionStates.entering_custom_category)
        
        data = await state.get_data()
        type_text = "—Ä–∞—Å—Ö–æ–¥–∞" if data["category_type"] == CategoryType.EXPENSE else "–¥–æ—Ö–æ–¥–∞"
        
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–°–≤–æ—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {type_text}:",
            reply_markup=get_cancel_keyboard()
        )
    else:
        # –í—ã–±—Ä–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        category_id = int(category_data)
        category = await get_category_by_id(category_id)
        
        if not category:
            await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await state.update_data(
            category_id=category_id,
            category_name=category.name,
            category_emoji=category.emoji
        )
        
        await state.set_state(AddTransactionStates.entering_description)
        
        await callback.message.edit_text(
            f"{category.emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            reply_markup=get_cancel_keyboard(skip_button=True)
        )
    
    await callback.answer()


## –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(StateFilter(AddTransactionStates.entering_custom_category))
async def process_custom_category_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    ## –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_name = sanitize_text(message.text, max_length=50)
    
    is_valid, error_msg = validate_category_name(category_name)
    if not is_valid:
        await message.answer(
            f"{error_msg}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    try:
        category = await create_custom_category(
            user_id=data["user_id"],
            name=category_name,
            category_type=data["category_type"],
            emoji="‚úèÔ∏è"
        )
        
        await state.update_data(
            category_id=category.id,
            category_name=category.name,
            category_emoji=category.emoji
        )
        
        await state.set_state(AddTransactionStates.entering_description)
        
        await message.answer(
            f"{category.emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):",
            reply_markup=get_cancel_keyboard(skip_button=True)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_cancel_keyboard()
        )


## –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(StateFilter(AddTransactionStates.entering_description))
async def process_description_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    ## –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    description = sanitize_text(message.text, max_length=500)
    
    is_valid, error_msg = validate_description(description)
    if not is_valid:
        await message.answer(
            f"{error_msg}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard(skip_button=True)
        )
        return
    
    await state.update_data(description=description)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_confirmation(message, state)


## –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(StateFilter(AddTransactionStates.entering_description), F.data == "skip")
async def process_skip_description(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.update_data(description=None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_confirmation(callback.message, state, edit=True)
    await callback.answer()


## –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async def show_confirmation(message: Message, state: FSMContext, edit: bool = False) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :param edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: None
    """
    await state.set_state(AddTransactionStates.confirmation)
    
    data = await state.get_data()
    
    transaction_type = data["transaction_type"]
    amount = data["amount"]
    category_name = data["category_name"]
    category_emoji = data["category_emoji"]
    description = data.get("description")
    
    type_emoji = "üí∞" if transaction_type == "income" else "üí∏"
    type_text = "–î–æ—Ö–æ–¥" if transaction_type == "income" else "–†–∞—Å—Ö–æ–¥"
    sign = "+" if transaction_type == "income" else "-"
    
    text = (
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        f"{type_emoji} <b>{type_text}</b>\n"
        f"üíµ –°—É–º–º–∞: <b>{sign}{amount:.2f} ‚ÇΩ</b>\n"
        f"{category_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>"
    )
    
    if description:
        text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    
    text += "\n\n<i>–í—Å—ë –≤–µ—Ä–Ω–æ?</i>"
    
    if edit:
        await message.edit_text(text, reply_markup=get_confirmation_keyboard())
    else:
        await message.answer(text, reply_markup=get_confirmation_keyboard())


## –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(StateFilter(AddTransactionStates.confirmation), F.data.startswith("confirm:"))
async def process_confirmation(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    action = callback.data.split(":")[1]
    
    if action == "no":
        # –û—Ç–º–µ–Ω–∞
        await state.clear()
        await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await callback.answer()
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    data = await state.get_data()
    
    try:
        transaction_type_str = data["transaction_type"]
        transaction_type = TransactionType.INCOME if transaction_type_str == "income" else TransactionType.EXPENSE
        
        transaction = await create_transaction(
            user_id=data["user_id"],
            transaction_type=transaction_type,
            amount=data["amount"],
            category_id=data["category_id"],
            description=data.get("description")
        )
        
        type_emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        sign = "+" if transaction_type == TransactionType.INCOME else "-"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"{type_emoji} {sign}{data['amount']:.2f} ‚ÇΩ\n"
            f"{data['category_emoji']} {data['category_name']}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()
    
    await callback.answer()


## –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(StateFilter("*"), F.data == "cancel")
async def process_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

