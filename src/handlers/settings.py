"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from loguru import logger
from decimal import Decimal
from datetime import datetime, timezone

from src.models import get_session, User
from src.services.database import get_or_create_user, get_user_statistics
from src.states.settings_states import SettingsStates
from src.keyboards.settings_keyboards import (
    get_settings_menu_keyboard,
    get_cancel_settings_keyboard,
    get_remove_limit_keyboard
)
from sqlalchemy import select
from config import get_settings

router = Router(name="settings")


## –ö–æ–º–∞–Ω–¥–∞ /settings
@router.message(Command("settings"))
async def cmd_settings(message: Message) -> None:
    """
    –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∫–æ–º–∞–Ω–¥–∞).
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "üí° <b>–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç?</b>\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∫—Ä—É–ø–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n"
        "‚Ä¢ –ë–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"
    )
    
    await message.answer(
        text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )


## –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "settings:menu")
async def settings_menu(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = callback.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "üí° <b>–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç?</b>\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∫—Ä—É–ø–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n"
        "‚Ä¢ –ë–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤
@router.callback_query(F.data == "settings:view_limits")
async def view_limits(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user_tg = callback.from_user
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_tg.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        settings = get_settings()
        global_limit = settings.max_transaction_amount
        
        text = "üìã <b>–¢–≤–æ–∏ –ª–∏–º–∏—Ç—ã</b>\n\n"
        
        text += "üí∞ <b>–õ–∏–º–∏—Ç –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        if user.max_transaction_limit:
            text += f"‚îî {user.max_transaction_limit:,}‚ÇΩ (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π)\n\n"
        else:
            text += f"‚îî {global_limit:,}‚ÇΩ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n\n"
        
        text += "üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ç:</b>\n"
        if user.monthly_limit:
            text += f"‚îî {user.monthly_limit:,}‚ÇΩ\n\n"
            
            now = datetime.now(timezone.utc)
            start_month = datetime(now.year, now.month, 1, tzinfo=timezone.utc)
            stats = await get_user_statistics(user.id, start_date=start_month)
            
            spent = float(stats['total_expense'])
            remaining = user.monthly_limit - spent
            percent = (spent / user.monthly_limit * 100) if user.monthly_limit > 0 else 0
            
            text += f"üí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ:</b>\n"
            text += f"‚îî {spent:,.0f}‚ÇΩ –∏–∑ {user.monthly_limit:,}‚ÇΩ ({percent:.1f}%)\n"
            text += f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f}‚ÇΩ\n\n"
            
            if percent >= 100:
                text += "‚ö†Ô∏è <b>–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω!</b>\n\n"
            elif percent >= 80:
                text += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –°–∫–æ—Ä–æ –¥–æ—Å—Ç–∏–≥–Ω–µ—à—å –ª–∏–º–∏—Ç–∞.\n\n"
        else:
            text += "‚îî –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n\n"
        
        text += "üí° –ù–∞–∂–º–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã."
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(F.data == "settings:transaction_limit")
async def set_transaction_limit(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–∏–º–∏—Ç–∞ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    
    text = (
        "üí∞ <b>–õ–∏–º–∏—Ç –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        "–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–ª—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 50000</i>"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_settings_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(SettingsStates.waiting_for_transaction_limit)
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.message(SettingsStates.waiting_for_transaction_limit)
async def process_transaction_limit(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: None
    """
    user_tg = message.from_user
    
    try:
        limit = int(message.text.replace(" ", "").replace(",", ""))
        
        if limit <= 0:
            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
        
        if limit > 1000000000:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
        
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user_tg.id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                user.max_transaction_limit = limit
                await session.commit()
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {limit}‚ÇΩ")
                
                text = (
                    f"‚úÖ <b>–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {limit:,}‚ÇΩ\n\n"
                    f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –±–æ–ª—å—à–µ —ç—Ç–æ–π —Å—É–º–º—ã —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."
                )
                
                await message.answer(
                    text,
                    reply_markup=get_settings_menu_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö.\n\n"
            "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 50000"
        )


## –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
@router.callback_query(F.data == "settings:monthly_limit")
async def set_monthly_limit(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ç.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: None
    """
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç")
    
    text = (
        "üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ç</b>\n\n"
        "–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ –º–µ—Å—è—Ü –≤ —Ä—É–±–ª—è—Ö.\n\n"
        "–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ç—Ä–∞—Ç—ã –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É.\n\n"
        "üí° <i>–ù–∞–ø—Ä–∏–º–µ—Ä: 100000</i>"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_settings_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(SettingsStates.waiting_for_monthly_limit)
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
@router.message(SettingsStates.waiting_for_monthly_limit)
async def process_monthly_limit(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: None
    """
    user_tg = message.from_user
    
    try:
        limit = int(message.text.replace(" ", "").replace(",", ""))
        
        if limit <= 0:
            await message.answer(
                "‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
        
        if limit > 1000000000:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
        
        async with get_session() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == user_tg.id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                user.monthly_limit = limit
                await session.commit()
                
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç: {limit}‚ÇΩ")
                
                text = (
                    f"‚úÖ <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤ –º–µ—Å—è—Ü: {limit:,}‚ÇΩ\n\n"
                    f"–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 80% –∏ 100% –ª–∏–º–∏—Ç–∞."
                )
                
                await message.answer(
                    text,
                    reply_markup=get_settings_menu_keyboard(),
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —Ä—É–±–ª—è—Ö.\n\n"
            "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 100000"
        )


## –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(F.data == "settings:remove_transaction_limit")
async def remove_transaction_limit(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user_tg = callback.from_user
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_tg.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.max_transaction_limit = None
            await session.commit()
            
            logger.info(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} —É–¥–∞–ª–∏–ª –ª–∏–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            
            settings = get_settings()
            
            text = (
                "‚úÖ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {settings.max_transaction_amount:,}‚ÇΩ"
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=get_settings_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


## –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
@router.callback_query(F.data == "settings:remove_monthly_limit")
async def remove_monthly_limit(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ç.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user_tg = callback.from_user
    
    async with get_session() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_tg.id)
        )
        user = result.scalar_one_or_none()
        
        if user:
            user.monthly_limit = None
            await session.commit()
            
            logger.info(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_tg.id} —É–¥–∞–ª–∏–ª –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç")
            
            text = (
                "‚úÖ <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–µ—Å—è—á–Ω—ã–µ —Ç—Ä–∞—Ç—ã."
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=get_settings_menu_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
    
    await callback.answer()


## –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
@router.callback_query(F.data == "settings:cancel")
async def cancel_settings(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    :param callback: Callback query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: FSM –∫–æ–Ω—Ç–µ–∫—Å—Ç
    :return: None
    """
    await state.clear()
    
    text = "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_menu_keyboard()
    )
    await callback.answer()
