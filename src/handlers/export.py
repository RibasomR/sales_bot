"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.

–°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è:
- –ö–æ–º–∞–Ω–¥—ã /export
- –í—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞
"""

from datetime import datetime, timedelta
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.states.export_states import ExportStates
from src.keyboards.export_keyboards import get_export_period_keyboard
from src.keyboards.view_keyboards import get_main_menu_keyboard
from src.services.database import get_or_create_user
from src.services.export_service import generate_transactions_excel, cleanup_export_file


router = Router(name="export")


## –ö–æ–º–∞–Ω–¥–∞ /export - –Ω–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
@router.message(Command("export"))
async def cmd_export(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export.
    
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–∏–æ–¥, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    
    await state.set_state(ExportStates.selecting_period)
    
    await message.answer(
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
        reply_markup=get_export_period_keyboard()
    )


## Callback –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@router.callback_query(F.data == "menu:export")
async def show_export_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ (callback –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é).
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞")
    
    await state.set_state(ExportStates.selecting_period)
    
    await callback.message.edit_text(
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:",
        reply_markup=get_export_period_keyboard()
    )
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
@router.callback_query(F.data.startswith("export:"))
async def handle_export_period(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.
    
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç Excel —Ñ–∞–π–ª —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    period = callback.data.split(":")[1]
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    now = datetime.now()
    start_date: Optional[datetime] = None
    end_date: Optional[datetime] = now
    period_name = ""
    
    if period == "today":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        period_name = "—Å–µ–≥–æ–¥–Ω—è"
    elif period == "yesterday":
        yesterday = now - timedelta(days=1)
        start_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
        period_name = "–≤—á–µ—Ä–∞"
    elif period == "week":
        start_date = now - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        start_date = now - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    elif period == "year":
        start_date = now - timedelta(days=365)
        period_name = "–∑–∞ –≥–æ–¥"
    elif period == "all":
        start_date = None
        end_date = None
        period_name = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await callback.message.edit_text(
        f"‚è≥ <b>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç {period_name}...</b>\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    await callback.answer()
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª
        file_path = await generate_transactions_excel(
            user_id=user.id,
            start_date=start_date,
            end_date=end_date
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = FSInputFile(file_path)
        
        await callback.message.answer_document(
            document=document,
            caption=(
                f"‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üìä –û—Ç—á–µ—Ç –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º {period_name}\n"
                f"üìÖ –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {now.strftime('%d.%m.%Y %H:%M')}"
            )
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "üìã <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>",
            reply_markup=get_main_menu_keyboard()
        )
        
        logger.success(f"‚úÖ –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        cleanup_export_file(file_path)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
        
        await callback.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_main_menu_keyboard()
        )
    
    finally:
        await state.clear()

