"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.states.category_states import CategoryStates
from src.keyboards.category_keyboards import (
    get_category_management_menu,
    get_category_type_keyboard,
    get_user_categories_keyboard,
    get_category_edit_menu,
    get_delete_confirmation_keyboard,
    get_cancel_keyboard
)
from src.services.database import (
    get_or_create_user,
    get_categories,
    get_category_by_id,
    create_custom_category,
    update_category,
    delete_category,
    count_category_transactions
)
from src.models import CategoryType

router = Router(name="categories")


## –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
@router.message(Command("categories"))
async def cmd_categories(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    
    text = (
        "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ–∑–¥–∞–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤!"
    )
    
    await message.answer(
        text,
        reply_markup=get_category_management_menu(),
        parse_mode="HTML"
    )


## –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "cat:view_my")
async def view_user_categories(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    categories = await get_categories(user_id=user.id, include_default=True)
    
    if not categories:
        await callback.answer("üö´ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    categories_data = [
        (cat.id, cat.name, cat.emoji, cat.is_default)
        for cat in categories
    ]
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
    custom_cats = [c for c in categories if not c.is_default]
    default_cats = [c for c in categories if c.is_default]
    
    text = "üìã <b>–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
    
    if custom_cats:
        text += "‚úèÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ:</b>\n"
        for cat in custom_cats:
            text += f"‚Ä¢ {cat.emoji} {cat.name}\n"
        text += "\n"
    else:
        text += "üö´ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n\n"
    
    text += f"üìå –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(default_cats)}\n\n"
    text += "üí° –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_user_categories_keyboard(categories_data),
        parse_mode="HTML"
    )
    await callback.answer()


## –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "cat:add")
async def start_add_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    await state.set_state(CategoryStates.choosing_type)
    
    text = (
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –í—ã–±–æ—Ä —Ç–∏–ø–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(CategoryStates.choosing_type, F.data.startswith("cattype:"))
async def choose_category_type(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    category_type = callback.data.split(":")[1]
    await state.update_data(category_type=category_type)
    await state.set_state(CategoryStates.entering_name)
    
    type_emoji = "üí∞" if category_type == "income" else "üí∏"
    type_name = "–¥–æ—Ö–æ–¥–æ–≤" if category_type == "income" else "—Ä–∞—Å—Ö–æ–¥–æ–≤"
    
    text = (
        f"{type_emoji} <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è {type_name}</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        "üìù <i>–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–ø–∏—Å–∫–∏, –•–æ–±–±–∏, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</i>"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CategoryStates.entering_name, F.text)
async def enter_category_name(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    name = message.text.strip()
    
    if len(name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    if len(name) < 2:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
            reply_markup=get_cancel_keyboard()
        )
        return
    
    await state.update_data(name=name)
    await state.set_state(CategoryStates.entering_emoji)
    
    text = (
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        "üé® <i>–ù–∞–ø—Ä–∏–º–µ—Ä: üì± üíª üéÆ üìö ‚úàÔ∏è</i>\n\n"
        "üí° –ú–æ–∂–µ—à—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —ç–º–æ–¥–∑–∏"
    )
    
    await message.answer(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


## –í–≤–æ–¥ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(CategoryStates.entering_emoji, F.text)
async def enter_category_emoji(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    emoji = message.text.strip()
    
    if len(emoji) > 10:
        emoji = emoji[:10]
    
    if not emoji:
        emoji = "‚úèÔ∏è"
    
    await state.update_data(emoji=emoji)
    await state.set_state(CategoryStates.confirming)
    
    data = await state.get_data()
    name = data.get('name')
    category_type = data.get('category_type')
    
    type_emoji = "üí∞" if category_type == "income" else "üí∏"
    type_name = "–î–æ—Ö–æ–¥" if category_type == "income" else "–†–∞—Å—Ö–æ–¥"
    
    text = (
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–¢–∏–ø: {type_emoji} {type_name}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"–≠–º–æ–¥–∑–∏: {emoji}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="catconfirm:yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cat:cancel")
    )
    
    await message.answer(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


## –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(CategoryStates.confirming, F.data == "catconfirm:yes")
async def confirm_create_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    data = await state.get_data()
    name = data.get('name')
    emoji = data.get('emoji')
    category_type_str = data.get('category_type')
    
    category_type = CategoryType.INCOME if category_type_str == "income" else CategoryType.EXPENSE
    
    try:
        category = await create_custom_category(
            user_id=user.id,
            name=name,
            category_type=category_type,
            emoji=emoji
        )
        
        logger.success(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.telegram_id}")
        
        text = (
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"{emoji} <b>{name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π."
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_category_management_menu(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_category_management_menu()
        )
    
    await state.clear()
    await callback.answer()


## –ü—Ä–æ—Å–º–æ—Ç—Ä/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("cat:edit:"))
async def view_category_details(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    category_id = int(callback.data.split(":")[2])
    
    category = await get_category_by_id(category_id)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    trans_count = await count_category_transactions(category_id, user.id)
    
    type_name = "üí∞ –î–æ—Ö–æ–¥" if category.type == CategoryType.INCOME else "üí∏ –†–∞—Å—Ö–æ–¥"
    status = "üìå –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è" if category.is_default else "‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è"
    
    text = (
        f"üè∑Ô∏è <b>{category.emoji} {category.name}</b>\n\n"
        f"–¢–∏–ø: {type_name}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_count}\n\n"
    )
    
    if category.is_default:
        text += "üîí –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å"
    else:
        text += "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_edit_menu(category.is_default),
        parse_mode="HTML"
    )
    await callback.answer()


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
@router.callback_query(F.data == "catedit:name")
async def start_edit_name(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback.message.text
    lines = message_text.split('\n')
    category_name_line = lines[0].replace('üè∑Ô∏è ', '').strip()
    
    # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –∏–º–µ–Ω–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    categories = await get_categories(user_id=user.id, include_default=False)
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = None
    for cat in categories:
        if f"{cat.emoji} {cat.name}" in category_name_line:
            category = cat
            break
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(editing_category_id=category.id, editing_field='name')
    await state.set_state(CategoryStates.editing_category)
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{category.name}</b>\n\n"
        "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(CategoryStates.editing_category, F.text)
async def process_category_edit(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    data = await state.get_data()
    category_id = data.get('editing_category_id')
    field = data.get('editing_field')
    new_value = message.text.strip()
    
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    
    if field == 'name':
        if len(new_value) > 100 or len(new_value) < 2:
            await message.answer(
                "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        updated = await update_category(category_id, user.id, name=new_value)
    elif field == 'emoji':
        if len(new_value) > 10:
            new_value = new_value[:10]
        
        updated = await update_category(category_id, user.id, emoji=new_value)
    else:
        updated = None
    
    await state.clear()
    
    if updated:
        text = (
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"{updated.emoji} <b>{updated.name}</b>"
        )
        
        await message.answer(
            text,
            reply_markup=get_category_management_menu(),
            parse_mode="HTML"
        )
        logger.success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.telegram_id}")
    else:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é",
            reply_markup=get_category_management_menu()
        )


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏
@router.callback_query(F.data == "catedit:emoji")
async def start_edit_emoji(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    message_text = callback.message.text
    lines = message_text.split('\n')
    category_name_line = lines[0].replace('üè∑Ô∏è ', '').strip()
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    categories = await get_categories(user_id=user.id, include_default=False)
    
    category = None
    for cat in categories:
        if f"{cat.emoji} {cat.name}" in category_name_line:
            category = cat
            break
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(editing_category_id=category.id, editing_field='emoji')
    await state.set_state(CategoryStates.editing_category)
    
    text = (
        f"üé® <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π —ç–º–æ–¥–∑–∏: {category.emoji}\n\n"
        "–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "catedit:delete")
async def confirm_delete_category(callback: CallbackQuery) -> None:
    """
    –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    message_text = callback.message.text
    lines = message_text.split('\n')
    category_name_line = lines[0].replace('üè∑Ô∏è ', '').strip()
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    categories = await get_categories(user_id=user.id, include_default=False)
    
    category = None
    for cat in categories:
        if f"{cat.emoji} {cat.name}" in category_name_line:
            category = cat
            break
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    trans_count = await count_category_transactions(category.id, user.id)
    
    text = (
        f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category.emoji} {category.name}\n"
        f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {trans_count}\n\n"
    )
    
    if trans_count > 0:
        text += (
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –£ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n"
            "–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
            "–¢—ã —É–≤–µ—Ä–µ–Ω?"
        )
    else:
        text += "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_delete_confirmation_keyboard(category.id),
        parse_mode="HTML"
    )
    await callback.answer()


## –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith("catdel:confirm:"))
async def delete_category_confirmed(callback: CallbackQuery) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    category_id = int(callback.data.split(":")[2])
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name
    )
    
    success = await delete_category(category_id, user.id)
    
    if success:
        text = (
            "‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã."
        )
        logger.success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.telegram_id}")
    else:
        text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_management_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


## –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
@router.callback_query(F.data == "cat:cancel")
async def cancel_category_operation(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    :return: None
    """
    await state.clear()
    
    text = (
        "‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_management_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


## –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == "cat:back")
async def back_to_categories(callback: CallbackQuery) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    text = (
        "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ–∑–¥–∞–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤!"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_management_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


## –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_main_menu(callback: CallbackQuery) -> None:
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
    
    :param callback: Callback query –æ—Ç inline-–∫–Ω–æ–ø–∫–∏
    :return: None
    """
    from src.keyboards.view_keyboards import get_main_menu_keyboard
    
    await callback.message.edit_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

