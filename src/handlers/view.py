"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è:
- –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
- –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –£–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –§–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
"""

import math
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from src.states import ViewTransactionsStates, EditTransactionStates, AddTransactionStates
from src.keyboards.view_keyboards import (
    get_main_menu_keyboard,
    get_transactions_navigation_keyboard,
    get_transaction_actions_keyboard,
    get_delete_confirmation_keyboard,
    get_period_filter_keyboard,
    get_edit_field_keyboard,
)
from src.keyboards.transaction_keyboards import get_categories_keyboard, get_cancel_keyboard
from src.services.database import (
    get_or_create_user,
    get_user_transactions_with_filters,
    count_user_transactions,
    get_transaction_by_id,
    delete_transaction,
    get_user_statistics,
    get_top_expense_categories,
    update_transaction,
    get_categories,
)
from src.models import TransactionType, CategoryType


router = Router(name="view")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRANSACTIONS_PER_PAGE = 10


## –ö–æ–º–∞–Ω–¥–∞ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.message(Command("menu"))
async def cmd_menu(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–∫—Ä—ã–ª –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    await message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )


## Callback –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "menu:main")
async def show_main_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (callback).
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.clear()
    
    await callback.message.edit_text(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


## –ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.message(Command("stats"))
async def cmd_stats(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    await show_statistics(message, user.id)


## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (callback)
@router.callback_query(F.data == "menu:stats")
async def show_stats_callback(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (callback).
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    await show_statistics(callback.message, user.id, edit=True)
    await callback.answer()


## –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (callback)
@router.callback_query(F.data == "menu:settings")
async def show_settings_menu(callback: CallbackQuery) -> None:
    """
    –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    from src.keyboards.settings_keyboards import get_settings_menu_keyboard
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤.\n\n"
        "üí° <b>–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç?</b>\n"
        "‚Ä¢ –ö–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –∫—Ä—É–ø–Ω—ã–º–∏ —Ç—Ä–∞—Ç–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤\n"
        "‚Ä¢ –ë–æ–ª–µ–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_settings_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


## –û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (callback)
@router.callback_query(F.data == "menu:categories")
async def show_categories_menu(callback: CallbackQuery) -> None:
    """
    –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    from src.keyboards.category_keyboards import get_category_management_menu
    
    text = (
        "üè∑Ô∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ–∑–¥–∞–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤!"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_category_management_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


## –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def show_statistics(
    message: Message,
    user_id: int,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    edit: bool = False
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :param edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: None
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = await get_user_statistics(user_id, start_date, end_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
    top_categories = await get_top_expense_categories(user_id, start_date, end_date, limit=3)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if not start_date and not end_date:
        period_text = "–∑–∞ –≤—Å—ë –≤—Ä–µ–º—è"
    else:
        period_text = "–∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    balance_emoji = "üíö" if stats['balance'] >= 0 else "üíî"
    balance_sign = "+" if stats['balance'] >= 0 else ""
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_text}</b>\n\n"
        f"{balance_emoji} <b>–ë–∞–ª–∞–Ω—Å:</b> {balance_sign}{float(stats['balance']):.2f} ‚ÇΩ\n\n"
        f"üí∞ <b>–î–æ—Ö–æ–¥—ã:</b> +{float(stats['total_income']):.2f} ‚ÇΩ\n"
        f"   –û–ø–µ—Ä–∞—Ü–∏–π: {stats['income_count']}\n\n"
        f"üí∏ <b>–†–∞—Å—Ö–æ–¥—ã:</b> -{float(stats['total_expense']):.2f} ‚ÇΩ\n"
        f"   –û–ø–µ—Ä–∞—Ü–∏–π: {stats['expense_count']}\n"
    )
    
    if top_categories:
        text += "\nüèÜ <b>–¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:</b>\n"
        for i, cat in enumerate(top_categories, 1):
            text += f"{i}. {cat['emoji']} {cat['name']}: {float(cat['total']):.2f} ‚ÇΩ\n"
    
    if edit:
        await message.edit_text(text, reply_markup=get_main_menu_keyboard())
    else:
        await message.answer(text, reply_markup=get_main_menu_keyboard())


## –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@router.message(Command("transactions"))
async def cmd_transactions(message: Message) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    await show_transactions_list(message, user.id, page=1, transaction_type=None)


## Callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    action = callback.data.split(":")[1]
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    if action == "all":
        await show_transactions_list(callback.message, user.id, page=1, edit=True)
    elif action == "income":
        await show_transactions_list(
            callback.message, user.id, page=1, transaction_type=TransactionType.INCOME, edit=True
        )
    elif action == "expense":
        await show_transactions_list(
            callback.message, user.id, page=1, transaction_type=TransactionType.EXPENSE, edit=True
        )
    elif action == "period":
        await callback.message.edit_text(
            "üìÖ <b>–§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            reply_markup=get_period_filter_keyboard()
        )
    elif action == "settings":
        await callback.message.edit_text(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞!",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()


## –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def show_transactions_list(
    message: Message,
    user_id: int,
    page: int = 1,
    transaction_type: Optional[TransactionType] = None,
    start_date: Optional[datetime] = None,
    end_date: Optional[datetime] = None,
    edit: bool = False
) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    :param transaction_type: –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    :param start_date: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞
    :param end_date: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
    :param edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: None
    """
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    total_count = await count_user_transactions(
        user_id, transaction_type, start_date, end_date
    )
    
    if total_count == 0:
        text = "üìù <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
        if transaction_type == TransactionType.INCOME:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Ö–æ–¥–æ–≤."
        elif transaction_type == TransactionType.EXPENSE:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤."
        else:
            text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /add"
        
        if edit:
            await message.edit_text(text, reply_markup=get_main_menu_keyboard())
        else:
            await message.answer(text, reply_markup=get_main_menu_keyboard())
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    total_pages = math.ceil(total_count / TRANSACTIONS_PER_PAGE)
    offset = (page - 1) * TRANSACTIONS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transactions = await get_user_transactions_with_filters(
        user_id=user_id,
        transaction_type=transaction_type,
        start_date=start_date,
        end_date=end_date,
        limit=TRANSACTIONS_PER_PAGE,
        offset=offset
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if transaction_type == TransactionType.INCOME:
        header = "üí∞ <b>–î–æ—Ö–æ–¥—ã</b>"
    elif transaction_type == TransactionType.EXPENSE:
        header = "üí∏ <b>–†–∞—Å—Ö–æ–¥—ã</b>"
    else:
        header = "üìù <b>–í—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>"
    
    text = f"{header}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    for tr in transactions:
        type_emoji = "üí∞" if tr.type == TransactionType.INCOME else "üí∏"
        sign = "+" if tr.type == TransactionType.INCOME else "-"
        
        date_str = tr.created_at.strftime("%d.%m.%Y %H:%M")
        
        text += (
            f"üìÖ {date_str}\n"
            f"{type_emoji} <b>{sign}{float(tr.amount):.2f} ‚ÇΩ</b> | {tr.category.emoji} {tr.category.name}\n"
        )
        
        if tr.description:
            text += f"üí¨ {tr.description}\n"
        
        text += f"üÜî ID: {tr.id}\n\n"
    
    text += f"\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–ª—è callback
    type_str = None
    if transaction_type == TransactionType.INCOME:
        type_str = "income"
    elif transaction_type == TransactionType.EXPENSE:
        type_str = "expense"
    
    keyboard = get_transactions_navigation_keyboard(page, total_pages, type_str)
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)


## –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
@router.callback_query(F.data.startswith("nav:"))
async def handle_navigation(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    parts = callback.data.split(":")
    action = parts[1]
    
    if action == "page":
        await callback.answer()
        return
    
    page = int(parts[2])
    transaction_type = None
    
    if len(parts) > 3:
        type_str = parts[3]
        if type_str == "income":
            transaction_type = TransactionType.INCOME
        elif type_str == "expense":
            transaction_type = TransactionType.EXPENSE
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    await show_transactions_list(
        callback.message, user.id, page=page, transaction_type=transaction_type, edit=True
    )
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –ø–µ—Ä–∏–æ–¥—É
@router.callback_query(F.data.startswith("period:"))
async def handle_period_filter(callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :return: None
    """
    period = callback.data.split(":")[1]
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    now = datetime.now()
    start_date = None
    end_date = now
    
    if period == "today":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
    elif period == "yesterday":
        yesterday = now - timedelta(days=1)
        start_date = yesterday.replace(hour=0, minute=0, second=0, microsecond=0)
        end_date = yesterday.replace(hour=23, minute=59, second=59, microsecond=999999)
    elif period == "week":
        start_date = now - timedelta(days=7)
    elif period == "month":
        start_date = now - timedelta(days=30)
    elif period == "year":
        start_date = now - timedelta(days=365)
    elif period == "all":
        start_date = None
        end_date = None
    
    await show_transactions_list(
        callback.message, user.id, page=1, start_date=start_date, end_date=end_date, edit=True
    )
    await callback.answer()


## –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(F.data.startswith("delete:"))
async def handle_delete_transaction(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    parts = callback.data.split(":")
    action = parts[1]
    
    if action == "cancel":
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        return
    
    transaction_id = int(parts[-1])
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    if action == "confirm":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - —É–¥–∞–ª—è–µ–º
        success = await delete_transaction(transaction_id, user.id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞</b>",
                reply_markup=get_main_menu_keyboard()
            )
            logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        else:
            await callback.message.edit_text(
                "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.clear()
    else:
        # –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        transaction = await get_transaction_by_id(transaction_id, user.id)
        
        if not transaction:
            await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        type_emoji = "üí∞" if transaction.type == TransactionType.INCOME else "üí∏"
        sign = "+" if transaction.type == TransactionType.INCOME else "-"
        
        text = (
            "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
            f"{type_emoji} <b>{sign}{float(transaction.amount):.2f} ‚ÇΩ</b>\n"
            f"{transaction.category.emoji} {transaction.category.name}\n"
        )
        
        if transaction.description:
            text += f"üí¨ {transaction.description}\n"
        
        text += "\n<b>–£–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_delete_confirmation_keyboard(transaction_id)
        )
    
    await callback.answer()


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(F.data.startswith("edit:"))
async def handle_edit_transaction(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    parts = callback.data.split(":")
    action = parts[1]
    
    if action == "cancel":
        await state.clear()
        await callback.message.edit_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer()
        return
    
    user = await get_or_create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
    )
    
    if action == "field":
        # –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        field = parts[2]
        transaction_id = int(parts[3])
        
        transaction = await get_transaction_by_id(transaction_id, user.id)
        
        if not transaction:
            await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        await state.update_data(
            transaction_id=transaction_id,
            user_id=user.id
        )
        
        if field == "amount":
            await state.set_state(EditTransactionStates.editing_amount)
            await callback.message.edit_text(
                f"üíµ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã</b>\n\n"
                f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: <b>{float(transaction.amount):.2f} ‚ÇΩ</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
                reply_markup=get_cancel_keyboard()
            )
        elif field == "category":
            await state.set_state(EditTransactionStates.editing_category)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category_type = CategoryType.EXPENSE if transaction.type == TransactionType.EXPENSE else CategoryType.INCOME
            categories = await get_categories(
                user_id=user.id,
                category_type=category_type,
                include_default=True
            )
            
            categories_list = [(cat.id, cat.name, cat.emoji) for cat in categories]
            type_str = "expense" if transaction.type == TransactionType.EXPENSE else "income"
            
            await callback.message.edit_text(
                f"üè∑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
                f"–¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category.emoji} <b>{transaction.category.name}</b>\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=get_categories_keyboard(categories_list, type_str)
            )
        elif field == "description":
            await state.set_state(EditTransactionStates.editing_description)
            
            desc_text = transaction.description if transaction.description else "<i>–Ω–µ —É–∫–∞–∑–∞–Ω–æ</i>"
            
            await callback.message.edit_text(
                f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
                f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {desc_text}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=get_cancel_keyboard(skip_button=True)
            )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
        transaction_id = int(parts[1])
        
        transaction = await get_transaction_by_id(transaction_id, user.id)
        
        if not transaction:
            await callback.answer("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        type_emoji = "üí∞" if transaction.type == TransactionType.INCOME else "üí∏"
        sign = "+" if transaction.type == TransactionType.INCOME else "-"
        
        text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
            f"{type_emoji} <b>{sign}{float(transaction.amount):.2f} ‚ÇΩ</b>\n"
            f"{transaction.category.emoji} {transaction.category.name}\n"
        )
        
        if transaction.description:
            text += f"üí¨ {transaction.description}\n"
        
        text += "\n<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?</b>"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_edit_field_keyboard(transaction_id)
        )
    
    await callback.answer()


## –í–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã
@router.message(StateFilter(EditTransactionStates.editing_amount))
async def process_edit_amount(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    amount_str = message.text.replace(",", ".").replace("‚ÇΩ", "").replace(" ", "")
    
    try:
        amount = float(amount_str)
        
        if amount <= 0:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        if amount > 10_000_000:
            await message.answer(
                "‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è.\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                reply_markup=get_cancel_keyboard()
            )
            return
        
        data = await state.get_data()
        transaction_id = data["transaction_id"]
        user_id = data["user_id"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = await update_transaction(
            transaction_id=transaction_id,
            user_id=user_id,
            amount=amount
        )
        
        if transaction:
            await message.answer(
                f"‚úÖ <b>–°—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
                f"–ù–æ–≤–∞—è —Å—É–º–º–∞: <b>{float(transaction.amount):.2f} ‚ÇΩ</b>",
                reply_markup=get_main_menu_keyboard()
            )
            logger.info(f"–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {amount}")
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
                reply_markup=get_main_menu_keyboard()
            )
        
        await state.clear()
        
    except (ValueError, Exception):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=get_cancel_keyboard()
        )


## –í—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(StateFilter(EditTransactionStates.editing_category), F.data.startswith("category:"))
async def process_edit_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    category_id = int(callback.data.split(":")[1])
    
    data = await state.get_data()
    transaction_id = data["transaction_id"]
    user_id = data["user_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = await update_transaction(
        transaction_id=transaction_id,
        user_id=user_id,
        category_id=category_id
    )
    
    if transaction:
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            f"–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category.emoji} <b>{transaction.category.name}</b>",
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()


## –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(StateFilter(EditTransactionStates.editing_description))
async def process_edit_description(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer(
            "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n\n–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            reply_markup=get_cancel_keyboard(skip_button=True)
        )
        return
    
    data = await state.get_data()
    transaction_id = data["transaction_id"]
    user_id = data["user_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction = await update_transaction(
        transaction_id=transaction_id,
        user_id=user_id,
        description=description
    )
    
    if transaction:
        await message.answer(
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ</b>\n\n"
            f"–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}",
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()


## –ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è (—É–¥–∞–ª–µ–Ω–∏–µ)
@router.callback_query(StateFilter(EditTransactionStates.editing_description), F.data == "skip")
async def process_edit_skip_description(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    data = await state.get_data()
    transaction_id = data["transaction_id"]
    user_id = data["user_id"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—É–¥–∞–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ)
    transaction = await update_transaction(
        transaction_id=transaction_id,
        user_id=user_id,
        description=None
    )
    
    if transaction:
        await callback.message.edit_text(
            f"‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ</b>",
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id} —É–¥–∞–ª–µ–Ω–æ")
    else:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await state.clear()
    await callback.answer()

