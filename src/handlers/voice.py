"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è:
- –û–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
- –û—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

import os
from pathlib import Path
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Voice
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from loguru import logger

from config import get_settings
from src.states import VoiceTransactionStates
from src.keyboards.voice_keyboards import (
    get_voice_confirmation_keyboard,
    get_voice_edit_keyboard,
    get_voice_categories_keyboard,
    get_voice_edit_cancel_keyboard,
)
from src.services.database import (
    get_or_create_user,
    get_categories,
    create_transaction,
)
from src.services.openrouter_service import (
    transcribe_audio,
    parse_transaction_text,
    find_matching_category,
    TranscriptionError,
    ParsingError,
)
from src.models import CategoryType, TransactionType


router = Router(name="voice")


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.voice)
async def handle_voice_message(message: Message, state: FSMContext) -> None:
    """
    Voice message handler.
    
    Downloads audio file, converts to text via AgentRouter,
    parses transaction and shows confirmation to user.
    
    :param message: Message with voice file
    :param state: FSM context
    :return: None
    """
    user = await get_or_create_user(
        telegram_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
    )
    
    processing_msg = await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    voice: Voice = message.voice
    audio_path = None
    
    try:
        file = await message.bot.get_file(voice.file_id)
        
        temp_dir = Path("temp_audio")
        temp_dir.mkdir(exist_ok=True)
        
        audio_path = temp_dir / f"{message.from_user.id}_{voice.file_unique_id}.ogg"
        
        await message.bot.download_file(file.file_path, audio_path)
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_path}")
        
        await processing_msg.edit_text("üéß –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...")
        text = await transcribe_audio(str(audio_path))
        logger.info(f"–¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {text}")
        
        await processing_msg.edit_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
        transaction_data = await parse_transaction_text(text)
        
        if not transaction_data:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add"
            )
            return
        
        transaction_type = transaction_data["type"]
        category_type = CategoryType.EXPENSE if transaction_type == "expense" else CategoryType.INCOME
        
        categories = await get_categories(
            user_id=user.id,
            category_type=category_type,
            include_default=True
        )
        
        category_id, category_name = find_matching_category(
            transaction_data.get("category"),
            categories
        )
        
        if not category_id:
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /add"
            )
            return
        
        category = next((c for c in categories if c.id == category_id), None)
        
        await state.update_data(
            user_id=user.id,
            transaction_type=transaction_type,
            amount=transaction_data["amount"],
            category_id=category_id,
            category_name=category.name,
            category_emoji=category.emoji,
            description=transaction_data.get("description"),
            recognized_text=text
        )
        
        await state.set_state(VoiceTransactionStates.waiting_confirmation)
        
        await show_voice_confirmation(processing_msg, state, edit=True)
        
    except TranscriptionError as e:
        from src.utils.sanitizer import sanitize_exception_message
        safe_error = sanitize_exception_message(e)
        logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {safe_error}")
        await processing_msg.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å: {e}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add"
        )
    except ParsingError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await processing_msg.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add"
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {e}")
        await processing_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add"
        )
    finally:
        if audio_path and audio_path.exists():
            try:
                os.remove(audio_path)
                logger.debug(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {audio_path}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")


## –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def show_voice_confirmation(message: Message, state: FSMContext, edit: bool = False) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :param edit: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :return: None
    """
    data = await state.get_data()
    
    transaction_type = data["transaction_type"]
    amount = data["amount"]
    category_name = data["category_name"]
    category_emoji = data["category_emoji"]
    description = data.get("description")
    recognized_text = data.get("recognized_text", "")
    
    type_emoji = "üí∞" if transaction_type == "income" else "üí∏"
    type_text = "–î–æ—Ö–æ–¥" if transaction_type == "income" else "–†–∞—Å—Ö–æ–¥"
    sign = "+" if transaction_type == "income" else "-"
    
    text = (
        f"üé§ <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑ –≥–æ–ª–æ—Å–∞</b>\n\n"
        f"<i>¬´{recognized_text}¬ª</i>\n\n"
        f"üìã <b>–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n"
        f"{type_emoji} <b>{type_text}</b>\n"
        f"üíµ –°—É–º–º–∞: <b>{sign}{float(amount):.2f} ‚ÇΩ</b>\n"
        f"{category_emoji} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>"
    )
    
    if description:
        text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    
    text += "\n\n<i>–í—Å—ë –≤–µ—Ä–Ω–æ?</i>"
    
    if edit:
        await message.edit_text(text, reply_markup=get_voice_confirmation_keyboard())
    else:
        await message.answer(text, reply_markup=get_voice_confirmation_keyboard())


## –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(StateFilter(VoiceTransactionStates.waiting_confirmation), F.data == "voice:confirm")
async def process_voice_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    data = await state.get_data()
    
    try:
        transaction_type_str = data["transaction_type"]
        transaction_type = TransactionType.INCOME if transaction_type_str == "income" else TransactionType.EXPENSE
        
        transaction = await create_transaction(
            user_id=data["user_id"],
            transaction_type=transaction_type,
            amount=data["amount"],
            category_id=data["category_id"],
            description=data.get("description")
        )
        
        type_emoji = "üí∞" if transaction_type == TransactionType.INCOME else "üí∏"
        sign = "+" if transaction_type == TransactionType.INCOME else "-"
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"{type_emoji} {sign}{float(data['amount']):.2f} ‚ÇΩ\n"
            f"{data['category_emoji']} {data['category_name']}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()
    
    await callback.answer()


## –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
@router.callback_query(StateFilter(VoiceTransactionStates.waiting_confirmation), F.data == "voice:edit")
async def process_voice_edit(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    data = await state.get_data()
    
    type_emoji = "üí∞" if data["transaction_type"] == "income" else "üí∏"
    type_text = "–î–æ—Ö–æ–¥" if data["transaction_type"] == "income" else "–†–∞—Å—Ö–æ–¥"
    sign = "+" if data["transaction_type"] == "income" else "-"
    
    text = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        f"{type_emoji} <b>{type_text}</b>\n"
        f"üíµ –°—É–º–º–∞: <b>{sign}{float(data['amount']):.2f} ‚ÇΩ</b>\n"
        f"{data['category_emoji']} –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{data['category_name']}</b>\n"
    )
    
    if data.get("description"):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
    
    text += "\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</i>"
    
    await callback.message.edit_text(text, reply_markup=get_voice_edit_keyboard())
    await callback.answer()


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
@router.callback_query(StateFilter(VoiceTransactionStates.waiting_confirmation), F.data == "voice_edit:amount")
async def process_voice_edit_amount(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.set_state(VoiceTransactionStates.editing_amount)
    
    await callback.message.edit_text(
        "üíµ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä—ã: 500, 1500.50, 15000</i>",
        reply_markup=get_voice_edit_cancel_keyboard()
    )
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã
@router.message(StateFilter(VoiceTransactionStates.editing_amount))
async def process_voice_amount_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    from decimal import Decimal, InvalidOperation
    
    amount_str = message.text.replace(",", ".").replace("‚ÇΩ", "").replace(" ", "")
    
    try:
        amount = Decimal(amount_str)
        
        if amount <= 0:
            await message.answer(
                "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                reply_markup=get_voice_edit_cancel_keyboard()
            )
            return
        
        if amount > 10_000_000:
            await message.answer(
                "‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 10 000 000).\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:",
                reply_markup=get_voice_edit_cancel_keyboard()
            )
            return
        
        await state.update_data(amount=amount)
        await state.set_state(VoiceTransactionStates.waiting_confirmation)
        
        await show_voice_confirmation(message, state)
        
    except (ValueError, InvalidOperation):
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–æ–∂–Ω–æ —Å –∫–æ–ø–µ–π–∫–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É):\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 500, 1500.50",
            reply_markup=get_voice_edit_cancel_keyboard()
        )


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(StateFilter(VoiceTransactionStates.waiting_confirmation), F.data == "voice_edit:category")
async def process_voice_edit_category(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.set_state(VoiceTransactionStates.editing_category)
    
    data = await state.get_data()
    category_type = CategoryType.EXPENSE if data["transaction_type"] == "expense" else CategoryType.INCOME
    
    categories = await get_categories(
        user_id=data["user_id"],
        category_type=category_type,
        include_default=True
    )
    
    categories_list = [(cat.id, cat.name, cat.emoji) for cat in categories]
    
    type_text = "—Ä–∞—Å—Ö–æ–¥–∞" if category_type == CategoryType.EXPENSE else "–¥–æ—Ö–æ–¥–∞"
    
    await callback.message.edit_text(
        f"üè∑ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {type_text}:",
        reply_markup=get_voice_categories_keyboard(categories_list, data["transaction_type"])
    )
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(StateFilter(VoiceTransactionStates.editing_category), F.data.startswith("voice_cat:"))
async def process_voice_category_selection(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    category_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data = await state.get_data()
    category_type = CategoryType.EXPENSE if data["transaction_type"] == "expense" else CategoryType.INCOME
    
    categories = await get_categories(
        user_id=data["user_id"],
        category_type=category_type,
        include_default=True
    )
    
    category = next((c for c in categories if c.id == category_id), None)
    
    if not category:
        await callback.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(
        category_id=category.id,
        category_name=category.name,
        category_emoji=category.emoji
    )
    
    await state.set_state(VoiceTransactionStates.waiting_confirmation)
    
    await show_voice_confirmation(callback.message, state, edit=True)
    await callback.answer()


## –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
@router.callback_query(StateFilter(VoiceTransactionStates.waiting_confirmation), F.data == "voice_edit:description")
async def process_voice_edit_description(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.set_state(VoiceTransactionStates.editing_description)
    
    data = await state.get_data()
    current_description = data.get("description", "")
    
    text = "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è</b>\n\n"
    
    if current_description:
        text += f"<i>–¢–µ–∫—É—â–µ–µ:</i> {current_description}\n\n"
    
    text += "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:"
    
    await callback.message.edit_text(text, reply_markup=get_voice_edit_cancel_keyboard())
    await callback.answer()


## –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(StateFilter(VoiceTransactionStates.editing_description))
async def process_voice_description_input(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    description = message.text.strip()
    
    if description == "-":
        # –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        await state.update_data(description=None)
    else:
        if len(description) > 500:
            await message.answer(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤).\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=get_voice_edit_cancel_keyboard()
            )
            return
        
        await state.update_data(description=description)
    
    await state.set_state(VoiceTransactionStates.waiting_confirmation)
    
    await show_voice_confirmation(message, state)


## –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
@router.callback_query(StateFilter(VoiceTransactionStates), F.data == "voice:back_to_confirm")
async def process_voice_back_to_confirm(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.set_state(VoiceTransactionStates.waiting_confirmation)
    await show_voice_confirmation(callback.message, state, edit=True)
    await callback.answer()


## –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(StateFilter(VoiceTransactionStates), F.data == "voice:back_to_edit_menu")
async def process_voice_back_to_edit_menu(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.set_state(VoiceTransactionStates.waiting_confirmation)
    await process_voice_edit(callback, state)


## –û—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@router.callback_query(StateFilter(VoiceTransactionStates), F.data == "voice:cancel")
async def process_voice_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≥–æ–ª–æ—Å–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    
    :param callback: Callback –æ—Ç inline –∫–Ω–æ–ø–∫–∏
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM
    :return: None
    """
    await state.clear()
    await callback.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()

