"""
–ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤.

–•—Ä–∞–Ω–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

from typing import List, TYPE_CHECKING
from enum import Enum as PyEnum
from sqlalchemy import String, Boolean, ForeignKey, Enum
from sqlalchemy.orm import Mapped, mapped_column, relationship

from .base import Base, TimestampMixin

if TYPE_CHECKING:
    from .user import User
    from .transaction import Transaction


## –¢–∏–ø—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
class CategoryType(str, PyEnum):
    """
    –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    
    :cvar INCOME: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–æ–≤
    :cvar EXPENSE: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
    """
    
    INCOME = "income"
    EXPENSE = "expense"


## –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class Category(Base, TimestampMixin):
    """
    –ú–æ–¥–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ (—Å–∏—Å—Ç–µ–º–Ω—ã–º–∏) –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏.
    –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏ –æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö,
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ - —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    
    :ivar id: –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
    :ivar name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :ivar type: –¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
    :ivar emoji: –≠–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    :ivar is_default: –§–ª–∞–≥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :ivar user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (NULL –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö)
    :ivar user: –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :ivar transactions: –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    
    __tablename__ = "categories"
    __table_args__ = {"comment": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"}
    
    id: Mapped[int] = mapped_column(primary_key=True, autoincrement=True)
    
    name: Mapped[str] = mapped_column(
        String(100),
        nullable=False,
        comment="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )
    
    type: Mapped[CategoryType] = mapped_column(
        Enum(CategoryType, name="category_type"),
        nullable=False,
        index=True,
        comment="–¢–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)"
    )
    
    emoji: Mapped[str] = mapped_column(
        String(10),
        nullable=False,
        default="üìù",
        comment="–≠–º–æ–¥–∑–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    )
    
    is_default: Mapped[bool] = mapped_column(
        Boolean,
        nullable=False,
        default=False,
        index=True,
        comment="–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Å–∏—Å—Ç–µ–º–Ω–∞—è)"
    )
    
    user_id: Mapped[int | None] = mapped_column(
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=True,
        index=True,
        comment="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (NULL –¥–ª—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö)"
    )
    
    user: Mapped["User"] = relationship(
        "User",
        back_populates="categories"
    )
    
    transactions: Mapped[List["Transaction"]] = relationship(
        "Transaction",
        back_populates="category",
        cascade="all, delete-orphan"
    )
    
    def __repr__(self) -> str:
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        return f"<Category(id={self.id}, name={self.name}, type={self.type}, is_default={self.is_default})>"

