"""
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Whisper.cpp.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ OpenAI Whisper API.
Whisper.cpp –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç 2-4x –ª—É—á—à—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.

:author: Finance Bot Team
:date: 2025-10-20
"""

import os
import tempfile
from typing import Optional

from pywhispercpp.model import Model
from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import JSONResponse

app = FastAPI(title="Whisper.cpp Transcription API", version="2.0.0")

## Load Whisper.cpp model at startup
WHISPER_MODEL = os.getenv("WHISPER_MODEL", "base")
WHISPER_THREADS = int(os.getenv("WHISPER_THREADS", "4"))

print(f"üé§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper.cpp: {WHISPER_MODEL} (–ø–æ—Ç–æ–∫–æ–≤: {WHISPER_THREADS})")
model = Model(
    model=f"ggml-{WHISPER_MODEL}.bin",
    n_threads=WHISPER_THREADS
)
print("‚úÖ –ú–æ–¥–µ–ª—å Whisper.cpp –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")


@app.get("/health")
async def health_check():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞.
    
    :return: –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
    :rtype: dict
    """
    return {
        "status": "healthy",
        "model": WHISPER_MODEL,
        "backend": "whisper.cpp",
        "threads": WHISPER_THREADS
    }


@app.post("/transcribe")
async def transcribe_audio(
    file: UploadFile = File(...),
    language: Optional[str] = "ru"
):
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç.
    
    :param file: –ê—É–¥–∏–æ —Ñ–∞–π–ª –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
    :type file: UploadFile
    :param language: –Ø–∑—ã–∫ –∞—É–¥–∏–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
    :type language: str
    :return: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    :rtype: dict
    
    :raises HTTPException: –ü—Ä–∏ –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
    
    Example:
        >>> # POST /transcribe
        >>> # file: audio.ogg
        >>> # language: ru
        >>> {"text": "–†–∞—Å—Ö–æ–¥ 500 —Ä—É–±–ª–µ–π –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"}
    """
    if not file:
        raise HTTPException(status_code=400, detail="–§–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    allowed_extensions = [".mp3", ".wav", ".ogg", ".m4a", ".flac"]
    file_ext = os.path.splitext(file.filename)[1].lower()
    
    if file_ext not in allowed_extensions:
        raise HTTPException(
            status_code=400,
            detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {allowed_extensions}"
        )
    
    try:
        # Save file to temporary directory
        with tempfile.NamedTemporaryFile(delete=False, suffix=file_ext) as tmp_file:
            content = await file.read()
            tmp_file.write(content)
            tmp_file_path = tmp_file.name
        
        # Transcribe using Whisper.cpp
        result = model.transcribe(
            tmp_file_path,
            language=language
        )
        
        # Delete temporary file
        os.unlink(tmp_file_path)
        
        # Extract text from result
        text = result.strip() if isinstance(result, str) else result.get("text", "").strip()
        
        return JSONResponse({
            "text": text,
            "language": language
        })
    
    except Exception as e:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'tmp_file_path' in locals():
            try:
                os.unlink(tmp_file_path)
            except:
                pass
        
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {str(e)}"
        )


@app.get("/")
async def root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API.
    
    :return: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API
    :rtype: dict
    """
    return {
        "service": "Whisper.cpp Transcription API",
        "version": "2.0.0",
        "model": WHISPER_MODEL,
        "backend": "whisper.cpp",
        "threads": WHISPER_THREADS,
        "endpoints": {
            "health": "/health",
            "transcribe": "/transcribe (POST)"
        }
    }


